19:44:47.503 [main] INFO  ParagraphAndCodeBlockParser Text is parsed
19:44:47.516 [main] INFO  App        
Menu:
1. - Print text
2. - Find max number of sentences with same word (func. 1)
3. - Sort sentences (func. 2)
4. - Print words with length from interrogative sentences (func. 4)
5. - Swap first and last word in sentence (func. 5)
6. - Vowel words are sorted by first consonant letter (func. 8)
7. - Words are sorted by letter frequency (func. 9)
8. - Exit
Select: 
19:44:51.032 [main] INFO  App        
Menu:
1. - Print text
2. - Find max number of sentences with same word (func. 1)
3. - Sort sentences (func. 2)
4. - Print words with length from interrogative sentences (func. 4)
5. - Swap first and last word in sentence (func. 5)
6. - Vowel words are sorted by first consonant letter (func. 8)
7. - Words are sorted by letter frequency (func. 9)
8. - Exit
Select: 
19:44:57.113 [main] INFO  TextEditor  Find max number of sentences with same word (func. 1)
19:44:57.188 [main] INFO  TextEditor  Word - Instance Total number of sentences: 31
19:44:57.188 [main] INFO  TextEditor  Word - object Total number of sentences: 31
19:44:57.188 [main] INFO  TextEditor  Total number of sentences: 59 Sentences: 
19:44:57.190 [main] INFO  TextEditor The increment method modifies an existing Time object. 
19:44:57.190 [main] INFO  TextEditor If you create a Time object and display it with println: 
19:44:57.190 [main] INFO  TextEditor Because every Time object contains these data, we define attributes to hold them. 
19:44:57.190 [main] INFO  TextEditor that is, the object the method is invoked on. 
19:44:57.190 [main] INFO  TextEditor that is, two objects are equivalent if their instance variables are equal. 
19:44:57.190 [main] INFO  TextEditor You can use this the same way you use the name of any other object. 
19:44:57.190 [main] INFO  TextEditor Overloading constructors provides the flexibility to create an object first and then fill in the attributes, or collect all the information before creating the object itself. 
19:44:57.190 [main] INFO  TextEditor equals is an instance method, so it uses this to refer to the current object and it doesn’t have the keyword static. 
19:44:57.190 [main] INFO  TextEditor Instead, it creates and returns a new Time object. 
19:44:57.190 [main] INFO  TextEditor Defining a class creates a new object type with the same name. 
19:44:57.190 [main] INFO  TextEditor When the constructor is done, new returns a reference to the new object. 
19:44:57.190 [main] INFO  TextEditor The data encapsulated in a Time object are an hour, a minute, and a number of seconds. 
19:44:57.190 [main] INFO  TextEditor On the other hand, here’s what it looks like as an instance method: 
19:44:57.190 [main] INFO  TextEditor that is, it is an instance of some class? 
19:44:57.190 [main] INFO  TextEditor Static methods and instance methods do the same thing, and you can convert from one to the other with just a few changes. 
19:44:57.191 [main] INFO  TextEditor Instance variables are declared at the beginning of the class definition, outside of any method. 
19:44:57.191 [main] INFO  TextEditor If we decide that TimeClient should also be able to modify the instance variables of Time, we can provide methods to do that, too: 
19:44:57.191 [main] INFO  TextEditor We could write an instance method that gets invoked on one object and takes the other as a parameter. 
19:44:57.191 [main] INFO  TextEditor Recall that the instance variables of Time are private. 
19:44:57.191 [main] INFO  TextEditor In this chapter, we will define classes that represent useful object types. 
19:44:57.191 [main] INFO  TextEditor We could decide that it’s not a problem, and refuse to let other classes access the instance variables. 
19:44:57.191 [main] INFO  TextEditor The methods that operate on an object type are defined in the class for that object. 
19:44:57.191 [main] INFO  TextEditor So if we decide that TimeClient should be able to read the instance variables of Time, we can provide methods to do it: 
19:44:57.191 [main] INFO  TextEditor Each line initializes an instance variable to zero (which in this example means midnight). 
19:44:57.191 [main] INFO  TextEditor The name this is a keyword that refers to the object we are creating. 
19:44:57.191 [main] INFO  TextEditor Writing getters and setters can get boring, but many IDEs can generate them for you based on the instance variables. 
19:44:57.191 [main] INFO  TextEditor When you invoke new, Java creates the object and calls your constructor to initialize the instance variables. 
19:44:57.191 [main] INFO  TextEditor Every object belongs to some object type; 
19:44:57.191 [main] INFO  TextEditor Instance methods are sometimes called “non-static”; 
19:44:57.191 [main] INFO  TextEditor One common reason to define a new class is to encapsulate related data in an object that can be treated as a single unit. 
19:44:57.191 [main] INFO  TextEditor For example, you can read and write the instance variables of this, and you can pass this as an argument to other methods. 
19:44:57.191 [main] INFO  TextEditor Inside the method, we use this to refer to the current instance; 
19:44:57.192 [main] INFO  TextEditor But the problem is that when Class A accesses the instance variables of Class B directly, A becomes “dependent” on B. 
19:44:57.192 [main] INFO  TextEditor Every object type has a method called toString that returns a string representation of the object. 
19:44:57.192 [main] INFO  TextEditor We didn’t declare any variables with type Hello, and we didn’t use new to create a Hello object. 
19:44:57.192 [main] INFO  TextEditor All this constructor does is copy values from the parameters to the instance variables. 
19:44:57.192 [main] INFO  TextEditor This example creates a Time object that represents a fraction of a second before noon: 
19:44:57.192 [main] INFO  TextEditor But the instance variables are private, which means they can only be accessed from inside the Time class. 
19:44:57.192 [main] INFO  TextEditor Inside the equals method, this refers to the same object as time1, and that refers to the same object as time3. 
19:44:57.192 [main] INFO  TextEditor In this example, the names and types of the parameters are the same as the instance variables. 
19:44:57.192 [main] INFO  TextEditor As a result, the parameters shadow (or hide) the instance variables, so the keyword this is necessary to tell them apart. 
19:44:57.192 [main] INFO  TextEditor Since their instance variables are equal, the result is true. 
19:44:57.192 [main] INFO  TextEditor To create a Time object, you must use the new operator: 
19:44:57.192 [main] INFO  TextEditor And here’s how we would invoke the instance method: 
19:44:57.192 [main] INFO  TextEditor You can write them quickly just by looking at the list of instance variables. 
19:44:57.192 [main] INFO  TextEditor It is an instance method, so called because when you invoke it, you invoke it on an instance of the class (Time in this case). 
19:44:57.192 [main] INFO  TextEditor They are usually void methods, but sometimes they return a reference to the object they modify. 
19:44:57.192 [main] INFO  TextEditor The assignment operator copies references, so time1 and time2 refer to the same object. 
19:44:57.193 [main] INFO  TextEditor Private instance variables help keep classes isolated from each other so that changes in one class won’t require changes in other classes. 
19:44:57.193 [main] INFO  TextEditor Attributes are also called instance variables, because each instance has its own variables (as opposed to class variables, coming up in Section 12.3). 
19:44:57.193 [main] INFO  TextEditor We could provide methods to access the instance variables. 
19:44:57.193 [main] INFO  TextEditor When Java displays the value of an object type, it displays the name of the type and the address of the object (in hexadecimal). 
19:44:57.193 [main] INFO  TextEditor In this example, this in toString refers to the same object as time. 
19:44:57.193 [main] INFO  TextEditor When you display an object using print or println, Java invokes the object’s toString method. 
19:44:57.193 [main] INFO  TextEditor We could make the instance variables public. 
19:44:57.193 [main] INFO  TextEditor Figure 11.1: State diagram of a Time object. 
19:44:57.193 [main] INFO  TextEditor After declaring the instance variables, the next step is to define a constructor, which is a special method that initializes the instance variables. 
19:44:57.193 [main] INFO  TextEditor By default it simply displays the type of the object and its address, but you can override this behavior by providing your own toString method. 
19:44:57.193 [main] INFO  TextEditor The output of this method, given the time object from the previous section, would be 11:59:59.9. 
19:44:57.193 [main] INFO  App        
Menu:
1. - Print text
2. - Find max number of sentences with same word (func. 1)
3. - Sort sentences (func. 2)
4. - Print words with length from interrogative sentences (func. 4)
5. - Swap first and last word in sentence (func. 5)
6. - Vowel words are sorted by first consonant letter (func. 8)
7. - Words are sorted by letter frequency (func. 9)
8. - Exit
Select: 
19:44:58.529 [main] INFO  TextEditor  Sort sentences (func. 2)
19:44:58.533 [main] INFO  TextEditor 11.2  Constructors 
19:44:58.533 [main] INFO  TextEditor Chapter 11 Classes 
19:44:58.533 [main] INFO  TextEditor 11.3  More constructors 
19:44:58.533 [main] INFO  TextEditor 11.5  Displaying objects 
19:44:58.533 [main] INFO  TextEditor 11.8  Adding times 
19:44:58.533 [main] INFO  TextEditor 11.1  The Time class 
19:44:58.533 [main] INFO  TextEditor 11.4  Getters and setters 
19:44:58.533 [main] INFO  TextEditor 11.6  The toString method 
19:44:58.533 [main] INFO  TextEditor The output is 11:59:59.9. 
19:44:58.533 [main] INFO  TextEditor 11.7  The equals method 
19:44:58.533 [main] INFO  TextEditor The changes are: 
19:44:58.534 [main] INFO  TextEditor Figure 11.1 shows the result. 
19:44:58.534 [main] INFO  TextEditor Consider the following variables: 
19:44:58.534 [main] INFO  TextEditor We replaced t1 with this. 
19:44:58.534 [main] INFO  TextEditor 11.9  Pure methods and modifiers 
19:44:58.534 [main] INFO  TextEditor The keyword static is omitted. 
19:44:58.534 [main] INFO  TextEditor The naming convention is similar; 
19:44:58.534 [main] INFO  TextEditor But other definitions are possible. 
19:44:58.534 [main] INFO  TextEditor We removed the keyword static. 
19:44:58.534 [main] INFO  TextEditor We removed the first parameter. 
19:44:58.534 [main] INFO  TextEditor Here are the most important ideas: 
19:44:58.534 [main] INFO  TextEditor Now you can call toString directly: 
19:44:58.534 [main] INFO  TextEditor Because they are identical, time1 == time2 is true. 
19:44:58.534 [main] INFO  TextEditor But time1 and time3 refer to different objects. 
19:44:58.534 [main] INFO  TextEditor We can invoke equals as follows: 
19:44:58.534 [main] INFO  TextEditor What time does the movie end? 
19:44:58.534 [main] INFO  TextEditor Optionally, you could replace t2 with that. 
19:44:58.535 [main] INFO  TextEditor They don’t modify the parameters. 
19:44:58.535 [main] INFO  TextEditor Every object belongs to some object type; 
19:44:58.535 [main] INFO  TextEditor This design principle is called data encapsulation. 
19:44:58.535 [main] INFO  TextEditor This constructor does not take any arguments. 
19:44:58.535 [main] INFO  TextEditor Figure 11.1: State diagram of a Time object. 
19:44:58.535 [main] INFO  TextEditor We could make the instance variables public. 
19:44:58.535 [main] INFO  TextEditor Instance methods are sometimes called “non-static”; 
19:44:58.535 [main] INFO  TextEditor Figure 11.2: State diagram of three Time variables. 
19:44:58.535 [main] INFO  TextEditor Because they are not identical, time1 == time3 is false. 
19:44:58.535 [main] INFO  TextEditor Unlike this, that is not a keyword; 
19:44:58.535 [main] INFO  TextEditor That’s all there is to it. 
19:44:58.535 [main] INFO  TextEditor Here is a better version of add: 
19:44:58.535 [main] INFO  TextEditor But they can also be error-prone. 
19:44:58.535 [main] INFO  TextEditor This kind of isolation is called information hiding. 
19:44:58.535 [main] INFO  TextEditor Like void methods, constructors do not return values. 
19:44:58.535 [main] INFO  TextEditor There are three ways to solve this problem: 
19:44:58.535 [main] INFO  TextEditor Or you can invoke it indirectly through println: 
19:44:58.535 [main] INFO  TextEditor The equals method checks whether they are equivalent; 
19:44:58.536 [main] INFO  TextEditor that is, whether they have the same value. 
19:44:58.536 [main] INFO  TextEditor Many objects use a similar notion of equivalence; 
19:44:58.536 [main] INFO  TextEditor To demonstrate the difference, we’ll do both. 
19:44:58.536 [main] INFO  TextEditor it’s just a slightly clever variable name. 
19:44:58.536 [main] INFO  TextEditor The increment method modifies an existing Time object. 
19:44:58.536 [main] INFO  TextEditor that is, it is an instance of some class? 
19:44:58.536 [main] INFO  TextEditor Constructors have no return type (and no return value). 
19:44:58.536 [main] INFO  TextEditor Here is an example constructor for the Time class: 
19:44:58.536 [main] INFO  TextEditor You don’t have to, and you shouldn’t. 
19:44:58.536 [main] INFO  TextEditor In fact, some IDEs can generate them for you. 
19:44:58.536 [main] INFO  TextEditor Recall that the instance variables of Time are private. 
19:44:58.536 [main] INFO  TextEditor We could provide methods to access the instance variables. 
19:44:58.536 [main] INFO  TextEditor The first choice is appealing because it’s simple. 
19:44:58.536 [main] INFO  TextEditor the method that sets something is usually called setSomething. 
19:44:58.536 [main] INFO  TextEditor We can use printf to write it more concisely: 
19:44:58.536 [main] INFO  TextEditor For example, here is a toString method for Time: 
19:44:58.536 [main] INFO  TextEditor you might see this term in an error message. 
19:44:58.536 [main] INFO  TextEditor that is, the object the method is invoked on. 
19:44:58.536 [main] INFO  TextEditor We’ll use Time objects to figure it out. 
19:44:58.536 [main] INFO  TextEditor Here are two ways we could “add” Time objects: 
19:44:58.536 [main] INFO  TextEditor Instead, it creates and returns a new Time object. 
19:44:58.536 [main] INFO  TextEditor In contrast, methods like add are called pure because: 
19:44:58.536 [main] INFO  TextEditor We will also clarify the difference between classes and objects. 
19:44:58.536 [main] INFO  TextEditor It seems clear that hour and minute should be integers. 
19:44:58.537 [main] INFO  TextEditor By itself, this code fragment is a legal class definition: 
19:44:58.537 [main] INFO  TextEditor By default, the equals method does the same thing as ==. 
19:44:58.537 [main] INFO  TextEditor For Time objects, that’s probably not what we want. 
19:44:58.537 [main] INFO  TextEditor Since their instance variables are equal, the result is true. 
19:44:58.537 [main] INFO  TextEditor Here is a rough draft that uses the static approach: 
19:44:58.537 [main] INFO  TextEditor And here’s how we would invoke the static method: 
19:44:58.537 [main] INFO  TextEditor And here’s how we would invoke the instance method: 
19:44:58.537 [main] INFO  TextEditor In that case, sum.hour -= 24 would yield the correct result. 
19:44:58.537 [main] INFO  TextEditor They don’t have any other “side effects”, like printing. 
19:44:58.537 [main] INFO  TextEditor Just to keep things interesting, let’s make second a double. 
19:44:58.537 [main] INFO  TextEditor To create a Time object, you must use the new operator: 
19:44:58.537 [main] INFO  TextEditor Beginners sometimes make the mistake of invoking new inside the constructor. 
19:44:58.537 [main] INFO  TextEditor Once you get the hang of it, writing constructors gets boring. 
19:44:58.537 [main] INFO  TextEditor If you create a Time object and display it with println: 
19:44:58.537 [main] INFO  TextEditor Using printTime in Section 4.6 as a starting point, we could write: 
19:44:58.537 [main] INFO  TextEditor For this example, it returns 20:66, which is not a valid time. 
19:44:58.537 [main] INFO  TextEditor This implementation of add does not modify either of the parameters. 
19:44:58.537 [main] INFO  TextEditor As an alternative, we could have written a method like this: 
19:44:58.537 [main] INFO  TextEditor When objects are aliased, the effects of modifiers can be confusing. 
19:44:58.537 [main] INFO  TextEditor In this chapter, we will define classes that represent useful object types. 
19:44:58.537 [main] INFO  TextEditor Defining a class creates a new object type with the same name. 
19:44:58.537 [main] INFO  TextEditor The first step is to decide what type each variable should be. 
19:44:58.538 [main] INFO  TextEditor The syntax for constructors is similar to that of other methods, except: 
19:44:58.538 [main] INFO  TextEditor Pulling it all together, here is the complete class definition so far: 
19:44:58.538 [main] INFO  TextEditor These methods are formally called “mutators”, but more commonly known as setters. 
19:44:58.538 [main] INFO  TextEditor Inside the method, we use this to refer to the current instance; 
19:44:58.538 [main] INFO  TextEditor Figure 11.2 is a state diagram that shows these variables and their values. 
19:44:58.538 [main] INFO  TextEditor The assignment operator copies references, so time1 and time2 refer to the same object. 
19:44:58.538 [main] INFO  TextEditor We can provide an equals method that implements this notion of equivalence: 
19:44:58.538 [main] INFO  TextEditor that is, two objects are equivalent if their instance variables are equal. 
19:44:58.538 [main] INFO  TextEditor There’s only one problem: the addition code itself is not correct. 
19:44:58.538 [main] INFO  TextEditor Methods like increment, which breaks the first rule, are sometimes called modifiers. 
19:44:58.538 [main] INFO  TextEditor Modifiers can be more efficient because they don’t create new objects. 
19:44:58.538 [main] INFO  TextEditor It wouldn’t have done much if we had – but we could have! 
19:44:58.538 [main] INFO  TextEditor Because every Time object contains these data, we define attributes to hold them. 
19:44:58.538 [main] INFO  TextEditor When the constructor is done, new returns a reference to the new object. 
19:44:58.538 [main] INFO  TextEditor In this example, invoking new Time() in the constructor causes an infinite recursion: 
19:44:58.538 [main] INFO  TextEditor By convention, the method that gets a variable named something is called getSomething. 
19:44:58.538 [main] INFO  TextEditor In this example, this in toString refers to the same object as time. 
19:44:58.538 [main] INFO  TextEditor With objects you can use either one, but they are not the same. 
19:44:58.538 [main] INFO  TextEditor It doesn’t create a new one, and it doesn’t return anything. 
19:44:58.538 [main] INFO  TextEditor The return value only depends on the parameters, not on any other state. 
19:44:58.538 [main] INFO  TextEditor The new operator instantiates objects, that is, it creates new instances of a class? 
19:44:58.538 [main] INFO  TextEditor The name of the constructor is the same as the name of the class. 
19:44:58.538 [main] INFO  TextEditor Each line initializes an instance variable to zero (which in this example means midnight). 
19:44:58.538 [main] INFO  TextEditor The name this is a keyword that refers to the object we are creating. 
19:44:58.538 [main] INFO  TextEditor All this constructor does is copy values from the parameters to the instance variables. 
19:44:58.538 [main] INFO  TextEditor To invoke this second constructor, you have to provide arguments after the new operator. 
19:44:58.539 [main] INFO  TextEditor You can write them quickly just by looking at the list of instance variables. 
19:44:58.539 [main] INFO  TextEditor Methods like these are formally called “accessors”, but more commonly referred to as getters. 
19:44:58.539 [main] INFO  TextEditor We could write a static method that takes the two Time objects as parameters. 
19:44:58.539 [main] INFO  TextEditor On the other hand, here’s what it looks like as an instance method: 
19:44:58.539 [main] INFO  TextEditor We have already seen two types that encapsulate data in this way: Point and Rectangle. 
19:44:58.539 [main] INFO  TextEditor Another example, which we will implement ourselves, is Time, which represents a time of day. 
19:44:58.539 [main] INFO  TextEditor Instance variables are declared at the beginning of the class definition, outside of any method. 
19:44:58.539 [main] INFO  TextEditor The Time class is public, which means that it can be used in other classes. 
19:44:58.539 [main] INFO  TextEditor It also simplifies what other programmers need to understand in order to use your classes. 
19:44:58.539 [main] INFO  TextEditor You can use this the same way you use the name of any other object. 
19:44:58.539 [main] INFO  TextEditor But you do not declare this, and you can’t make an assignment to it. 
19:44:58.539 [main] INFO  TextEditor A common error when writing constructors is to put a return statement at the end. 
19:44:58.539 [main] INFO  TextEditor In this example, the reference gets assigned to the variable time, which has type Time. 
19:44:58.539 [main] INFO  TextEditor Parameters don’t have to use the same names, but that’s a common style. 
19:44:58.539 [main] INFO  TextEditor This example creates a Time object that represents a fraction of a second before noon: 
19:44:58.539 [main] INFO  TextEditor The output of this method, given the time object from the previous section, would be 11:59:59.9. 
19:44:58.539 [main] INFO  TextEditor The definition does not have the keyword static, because it is not a static method. 
19:44:58.539 [main] INFO  TextEditor For example, time1 and time3 represent the same time of day, so we should consider them equivalent. 
19:44:58.539 [main] INFO  TextEditor Whenever you define a new class, you also create a new type with the same name. 
19:44:58.539 [main] INFO  TextEditor The methods that operate on an object type are defined in the class for that object. 
19:44:58.539 [main] INFO  TextEditor If anything in B changes later, it is likely that A will have to change, too. 
19:44:58.539 [main] INFO  TextEditor This address can be useful for debugging, if you want to keep track of individual objects. 
19:44:58.540 [main] INFO  TextEditor As a reminder, you need to use \%d with integers and \%f with floating-point numbers. 
19:44:58.540 [main] INFO  TextEditor Every object type has a method called toString that returns a string representation of the object. 
19:44:58.540 [main] INFO  TextEditor When you display an object using print or println, Java invokes the object’s toString method. 
19:44:58.542 [main] INFO  TextEditor The body of the method is similar to printTime in the previous section, with two changes: 
19:44:58.543 [main] INFO  TextEditor Instead of printf, it uses String.format, which returns a formatted String rather than displaying it. 
19:44:58.543 [main] INFO  TextEditor The definition of identity is always the same, so the == operator always does the same thing. 
19:44:58.543 [main] INFO  TextEditor They are usually void methods, but sometimes they return a reference to the object they modify. 
19:44:58.543 [main] INFO  TextEditor So way back in Section 1.4, when we defined the class Hello, we created a type named Hello. 
19:44:58.543 [main] INFO  TextEditor The data encapsulated in a Time object are an hour, a minute, and a number of seconds. 
19:44:58.543 [main] INFO  TextEditor If you try to read or write them from another class, you will get a compiler error. 
19:44:58.543 [main] INFO  TextEditor When you invoke new, Java creates the object and calls your constructor to initialize the instance variables. 
19:44:58.543 [main] INFO  TextEditor Like other methods, constructors can be overloaded, which means you can provide multiple constructors with different parameters. 
19:44:58.543 [main] INFO  TextEditor In this example, the names and types of the parameters are the same as the instance variables. 
19:44:58.543 [main] INFO  TextEditor We have seen two ways to check whether values are equal: the == operator and the equals method. 
19:44:58.543 [main] INFO  TextEditor It’s still possible that hour may exceed 23, but there’s no days attribute to carry into. 
19:44:58.543 [main] INFO  TextEditor That way, we can use objects as parameters and return values, rather than passing and returning multiple values. 
19:44:58.543 [main] INFO  TextEditor But the instance variables are private, which means they can only be accessed from inside the Time class. 
19:44:58.543 [main] INFO  TextEditor Java knows which constructor to invoke by matching the arguments you provide with the parameters of the constructors. 
19:44:58.543 [main] INFO  TextEditor But the definition of equivalence is different for different objects, so objects can define their own equals methods. 
19:44:58.543 [main] INFO  TextEditor If you try to compile this code, you will get a message like hour has private access in Time. 
19:44:58.543 [main] INFO  TextEditor We could decide that it’s not a problem, and refuse to let other classes access the instance variables. 
19:44:58.543 [main] INFO  TextEditor Inside the equals method, this refers to the same object as time1, and that refers to the same object as time3. 
19:44:58.543 [main] INFO  TextEditor Suppose you are going to a movie that starts at 18:50 (or 6:50 PM), and the running time is 2 hours 16 minutes. 
19:44:58.544 [main] INFO  TextEditor We could write an instance method that gets invoked on one object and takes the other as a parameter. 
19:44:58.544 [main] INFO  TextEditor We didn’t declare any variables with type Hello, and we didn’t use new to create a Hello object. 
19:44:58.544 [main] INFO  TextEditor Writing getters and setters can get boring, but many IDEs can generate them for you based on the instance variables. 
19:44:58.544 [main] INFO  TextEditor To make a class immutable, like String, you can provide getters but no setters and pure methods but no modifiers. 
19:44:58.544 [main] INFO  TextEditor As a result, the parameters shadow (or hide) the instance variables, so the keyword this is necessary to tell them apart. 
19:44:58.544 [main] INFO  TextEditor But the problem is that when Class A accesses the instance variables of Class B directly, A becomes “dependent” on B. 
19:44:58.544 [main] INFO  TextEditor If second exceeds 59, we have to “carry” into the minutes column, and if minute exceeds 59, we have to carry into hour. 
19:44:58.544 [main] INFO  TextEditor Immutable objects can be more difficult to work with, at first, but they can save you from long hours of debugging. 
19:44:58.544 [main] INFO  TextEditor Think of a class like a blueprint for a house: you can use the same blueprint to build any number of houses? 
19:44:58.544 [main] INFO  TextEditor Attributes are also called instance variables, because each instance has its own variables (as opposed to class variables, coming up in Section 12.3). 
19:44:58.544 [main] INFO  TextEditor It is common to provide a constructor that takes no arguments, like the previous one, and a “value constructor”, like this one: 
19:44:58.544 [main] INFO  TextEditor A class definition is like a template for objects: it specifies what attributes the objects have and what methods can operate on them. 
19:44:58.544 [main] INFO  TextEditor Private instance variables help keep classes isolated from each other so that changes in one class won’t require changes in other classes. 
19:44:58.544 [main] INFO  TextEditor After declaring the instance variables, the next step is to define a constructor, which is a special method that initializes the instance variables. 
19:44:58.544 [main] INFO  TextEditor For example, you can read and write the instance variables of this, and you can pass this as an argument to other methods. 
19:44:58.544 [main] INFO  TextEditor For example, here’s a new class called TimeClient, because a class that uses objects defined in another class is called a client: 
19:44:58.544 [main] INFO  TextEditor So if we decide that TimeClient should be able to read the instance variables of Time, we can provide methods to do it: 
19:44:58.544 [main] INFO  TextEditor equals is an instance method, so it uses this to refer to the current object and it doesn’t have the keyword static. 
19:44:58.544 [main] INFO  TextEditor Static methods and instance methods do the same thing, and you can convert from one to the other with just a few changes. 
19:44:58.544 [main] INFO  TextEditor One common reason to define a new class is to encapsulate related data in an object that can be treated as a single unit. 
19:44:58.544 [main] INFO  TextEditor We can access them from within the Time class, but if we try to access them from another class, the compiler generates an error. 
19:44:58.544 [main] INFO  TextEditor If we decide that TimeClient should also be able to modify the instance variables of Time, we can provide methods to do that, too: 
19:44:58.544 [main] INFO  TextEditor When Java displays the value of an object type, it displays the name of the type and the address of the object (in hexadecimal). 
19:44:58.544 [main] INFO  TextEditor To display Time objects in a way that is more meaningful to users, you could write a method to display the hour, minute, and second. 
19:44:58.544 [main] INFO  TextEditor By default it simply displays the type of the object and its address, but you can override this behavior by providing your own toString method. 
19:44:58.544 [main] INFO  TextEditor It is an instance method, so called because when you invoke it, you invoke it on an instance of the class (Time in this case). 
19:44:58.545 [main] INFO  TextEditor Overloading constructors provides the flexibility to create an object first and then fill in the attributes, or collect all the information before creating the object itself. 
19:44:58.545 [main] INFO  TextEditor The 02 option means “total width 2, with leading zeros if necessary”, and the 04.1 option means “total width 4, one digit after the decimal point, leading zeros if necessary”. 
19:44:58.545 [main] INFO  TextEditor But if A only uses methods to interact with B, A and B are “independent”, which means that we can make changes in B without affecting A (as long as we don’t change the method signatures). 
19:44:58.545 [main] INFO  App        
Menu:
1. - Print text
2. - Find max number of sentences with same word (func. 1)
3. - Sort sentences (func. 2)
4. - Print words with length from interrogative sentences (func. 4)
5. - Swap first and last word in sentence (func. 5)
6. - Vowel words are sorted by first consonant letter (func. 8)
7. - Words are sorted by letter frequency (func. 9)
8. - Exit
Select: 
19:45:00.959 [main] INFO  App        Enter word length:
19:45:01.900 [main] INFO  TextEditor  Print words with length from interrogative sentences (func. 4)
19:45:01.900 [main] INFO  TextEditor  Size of word = 4
19:45:01.900 [main] INFO  TextEditor  Sentence: that is, it is an instance of some class? 
19:45:01.901 [main] INFO  TextEditor  Words: that some 
19:45:01.901 [main] INFO  TextEditor  Sentence: The new operator instantiates objects, that is, it creates new instances of a class? 
19:45:01.901 [main] INFO  TextEditor  Words: that 
19:45:01.901 [main] INFO  TextEditor  Sentence: Think of a class like a blueprint for a house: you can use the same blueprint to build any number of houses? 
19:45:01.901 [main] INFO  TextEditor  Words: like same 
19:45:01.901 [main] INFO  TextEditor  Sentence: What time does the movie end? 
19:45:01.901 [main] INFO  TextEditor  Words: What time does 
19:45:01.901 [main] INFO  App        
Menu:
1. - Print text
2. - Find max number of sentences with same word (func. 1)
3. - Sort sentences (func. 2)
4. - Print words with length from interrogative sentences (func. 4)
5. - Swap first and last word in sentence (func. 5)
6. - Vowel words are sorted by first consonant letter (func. 8)
7. - Words are sorted by letter frequency (func. 9)
8. - Exit
Select: 
19:45:04.712 [main] INFO  TextEditor  Swap first and last word in sentence (func. 5)
19:45:04.712 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.712 [main] INFO  TextEditor Chapter 11 Classes 
19:45:04.712 [main] INFO  TextEditor Classes 11 Chapter 
19:45:04.712 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.712 [main] INFO  TextEditor Whenever you define a new class, you also create a new type with the same name. 
19:45:04.712 [main] INFO  TextEditor name you define a new class, you also create a new type with the same Whenever. 
19:45:04.712 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.712 [main] INFO  TextEditor So way back in Section 1.4, when we defined the class Hello, we created a type named Hello. 
19:45:04.712 [main] INFO  TextEditor Hello way back in Section 1.4, when we defined the class Hello, we created a type named So. 
19:45:04.712 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.712 [main] INFO  TextEditor We didn’t declare any variables with type Hello, and we didn’t use new to create a Hello object. 
19:45:04.712 [main] INFO  TextEditor object didn’t declare any variables with type Hello, and we didn’t use new to create a Hello We. 
19:45:04.712 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.713 [main] INFO  TextEditor It wouldn’t have done much if we had – but we could have! 
19:45:04.713 [main] INFO  TextEditor have wouldn’t have done much if we had – but we could It! 
19:45:04.713 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.713 [main] INFO  TextEditor In this chapter, we will define classes that represent useful object types. 
19:45:04.713 [main] INFO  TextEditor types this chapter, we will define classes that represent useful object In. 
19:45:04.713 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.713 [main] INFO  TextEditor We will also clarify the difference between classes and objects. 
19:45:04.713 [main] INFO  TextEditor objects will also clarify the difference between classes and We. 
19:45:04.713 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.713 [main] INFO  TextEditor Here are the most important ideas: 
19:45:04.713 [main] INFO  TextEditor ideas are the most important Here: 
19:45:04.713 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.713 [main] INFO  TextEditor Defining a class creates a new object type with the same name. 
19:45:04.713 [main] INFO  TextEditor name a class creates a new object type with the same Defining. 
19:45:04.713 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.713 [main] INFO  TextEditor Every object belongs to some object type; 
19:45:04.713 [main] INFO  TextEditor type object belongs to some object Every; 
19:45:04.713 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.713 [main] INFO  TextEditor that is, it is an instance of some class? 
19:45:04.713 [main] INFO  TextEditor class is, it is an instance of some that? 
19:45:04.713 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.713 [main] INFO  TextEditor A class definition is like a template for objects: it specifies what attributes the objects have and what methods can operate on them. 
19:45:04.713 [main] INFO  TextEditor them class definition is like a template for objects: it specifies what attributes the objects have and what methods can operate on A. 
19:45:04.713 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.713 [main] INFO  TextEditor The new operator instantiates objects, that is, it creates new instances of a class? 
19:45:04.713 [main] INFO  TextEditor class new operator instantiates objects, that is, it creates new instances of a The? 
19:45:04.713 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.713 [main] INFO  TextEditor Think of a class like a blueprint for a house: you can use the same blueprint to build any number of houses? 
19:45:04.713 [main] INFO  TextEditor houses of a class like a blueprint for a house: you can use the same blueprint to build any number of Think? 
19:45:04.714 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.714 [main] INFO  TextEditor The methods that operate on an object type are defined in the class for that object. 
19:45:04.714 [main] INFO  TextEditor object methods that operate on an object type are defined in the class for that The. 
19:45:04.714 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.714 [main] INFO  TextEditor 11.1  The Time class 
19:45:04.714 [main] INFO  TextEditor 11.1  class Time The 
19:45:04.714 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.714 [main] INFO  TextEditor One common reason to define a new class is to encapsulate related data in an object that can be treated as a single unit. 
19:45:04.714 [main] INFO  TextEditor unit common reason to define a new class is to encapsulate related data in an object that can be treated as a single One. 
19:45:04.714 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.714 [main] INFO  TextEditor That way, we can use objects as parameters and return values, rather than passing and returning multiple values. 
19:45:04.714 [main] INFO  TextEditor values way, we can use objects as parameters and return values, rather than passing and returning multiple That. 
19:45:04.714 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.714 [main] INFO  TextEditor This design principle is called data encapsulation. 
19:45:04.714 [main] INFO  TextEditor encapsulation design principle is called data This. 
19:45:04.714 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.714 [main] INFO  TextEditor We have already seen two types that encapsulate data in this way: Point and Rectangle. 
19:45:04.714 [main] INFO  TextEditor Rectangle have already seen two types that encapsulate data in this way: Point and We. 
19:45:04.714 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.714 [main] INFO  TextEditor Another example, which we will implement ourselves, is Time, which represents a time of day. 
19:45:04.714 [main] INFO  TextEditor day example, which we will implement ourselves, is Time, which represents a time of Another. 
19:45:04.714 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.714 [main] INFO  TextEditor The data encapsulated in a Time object are an hour, a minute, and a number of seconds. 
19:45:04.714 [main] INFO  TextEditor seconds data encapsulated in a Time object are an hour, a minute, and a number of The. 
19:45:04.714 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.715 [main] INFO  TextEditor Because every Time object contains these data, we define attributes to hold them. 
19:45:04.715 [main] INFO  TextEditor them every Time object contains these data, we define attributes to hold Because. 
19:45:04.715 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.715 [main] INFO  TextEditor Attributes are also called instance variables, because each instance has its own variables (as opposed to class variables, coming up in Section 12.3). 
19:45:04.715 [main] INFO  TextEditor Section are also called instance variables, because each instance has its own variables (as opposed to class variables, coming up in Attributes 12.3). 
19:45:04.715 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.715 [main] INFO  TextEditor The first step is to decide what type each variable should be. 
19:45:04.715 [main] INFO  TextEditor be first step is to decide what type each variable should The. 
19:45:04.715 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.715 [main] INFO  TextEditor It seems clear that hour and minute should be integers. 
19:45:04.715 [main] INFO  TextEditor integers seems clear that hour and minute should be It. 
19:45:04.715 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.715 [main] INFO  TextEditor Just to keep things interesting, let’s make second a double. 
19:45:04.715 [main] INFO  TextEditor double to keep things interesting, let’s make second a Just. 
19:45:04.715 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.715 [main] INFO  TextEditor Instance variables are declared at the beginning of the class definition, outside of any method. 
19:45:04.715 [main] INFO  TextEditor method variables are declared at the beginning of the class definition, outside of any Instance. 
19:45:04.715 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.715 [main] INFO  TextEditor By itself, this code fragment is a legal class definition: 
19:45:04.715 [main] INFO  TextEditor definition itself, this code fragment is a legal class By: 
19:45:04.715 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.715 [main] INFO  TextEditor The Time class is public, which means that it can be used in other classes. 
19:45:04.715 [main] INFO  TextEditor classes Time class is public, which means that it can be used in other The. 
19:45:04.715 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.716 [main] INFO  TextEditor But the instance variables are private, which means they can only be accessed from inside the Time class. 
19:45:04.716 [main] INFO  TextEditor class the instance variables are private, which means they can only be accessed from inside the Time But. 
19:45:04.716 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.716 [main] INFO  TextEditor If you try to read or write them from another class, you will get a compiler error. 
19:45:04.716 [main] INFO  TextEditor error you try to read or write them from another class, you will get a compiler If. 
19:45:04.716 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.716 [main] INFO  TextEditor Private instance variables help keep classes isolated from each other so that changes in one class won’t require changes in other classes. 
19:45:04.716 [main] INFO  TextEditor classes instance variables help keep classes isolated from each other so that changes in one class won’t require changes in other Private. 
19:45:04.716 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.716 [main] INFO  TextEditor It also simplifies what other programmers need to understand in order to use your classes. 
19:45:04.716 [main] INFO  TextEditor classes also simplifies what other programmers need to understand in order to use your It. 
19:45:04.716 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.716 [main] INFO  TextEditor This kind of isolation is called information hiding. 
19:45:04.716 [main] INFO  TextEditor hiding kind of isolation is called information This. 
19:45:04.716 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.716 [main] INFO  TextEditor 11.2  Constructors 
19:45:04.716 [main] INFO  TextEditor 11.2  Constructors 
19:45:04.716 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.716 [main] INFO  TextEditor After declaring the instance variables, the next step is to define a constructor, which is a special method that initializes the instance variables. 
19:45:04.716 [main] INFO  TextEditor variables declaring the instance variables, the next step is to define a constructor, which is a special method that initializes the instance After. 
19:45:04.716 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.716 [main] INFO  TextEditor The syntax for constructors is similar to that of other methods, except: 
19:45:04.717 [main] INFO  TextEditor except syntax for constructors is similar to that of other methods, The: 
19:45:04.717 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.717 [main] INFO  TextEditor The name of the constructor is the same as the name of the class. 
19:45:04.717 [main] INFO  TextEditor class name of the constructor is the same as the name of the The. 
19:45:04.717 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.717 [main] INFO  TextEditor Constructors have no return type (and no return value). 
19:45:04.717 [main] INFO  TextEditor value have no return type (and no return Constructors). 
19:45:04.717 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.717 [main] INFO  TextEditor The keyword static is omitted. 
19:45:04.717 [main] INFO  TextEditor omitted keyword static is The. 
19:45:04.717 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.717 [main] INFO  TextEditor Here is an example constructor for the Time class: 
19:45:04.717 [main] INFO  TextEditor class is an example constructor for the Time Here: 
19:45:04.717 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.717 [main] INFO  TextEditor This constructor does not take any arguments. 
19:45:04.717 [main] INFO  TextEditor arguments constructor does not take any This. 
19:45:04.717 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.717 [main] INFO  TextEditor Each line initializes an instance variable to zero (which in this example means midnight). 
19:45:04.717 [main] INFO  TextEditor midnight line initializes an instance variable to zero (which in this example means Each). 
19:45:04.717 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.717 [main] INFO  TextEditor The name this is a keyword that refers to the object we are creating. 
19:45:04.717 [main] INFO  TextEditor creating name this is a keyword that refers to the object we are The. 
19:45:04.717 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.717 [main] INFO  TextEditor You can use this the same way you use the name of any other object. 
19:45:04.717 [main] INFO  TextEditor object can use this the same way you use the name of any other You. 
19:45:04.717 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.717 [main] INFO  TextEditor For example, you can read and write the instance variables of this, and you can pass this as an argument to other methods. 
19:45:04.717 [main] INFO  TextEditor methods example, you can read and write the instance variables of this, and you can pass this as an argument to other For. 
19:45:04.717 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.717 [main] INFO  TextEditor But you do not declare this, and you can’t make an assignment to it. 
19:45:04.718 [main] INFO  TextEditor it you do not declare this, and you can’t make an assignment to But. 
19:45:04.718 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.718 [main] INFO  TextEditor A common error when writing constructors is to put a return statement at the end. 
19:45:04.718 [main] INFO  TextEditor end common error when writing constructors is to put a return statement at the A. 
19:45:04.718 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.718 [main] INFO  TextEditor Like void methods, constructors do not return values. 
19:45:04.718 [main] INFO  TextEditor values void methods, constructors do not return Like. 
19:45:04.718 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.718 [main] INFO  TextEditor To create a Time object, you must use the new operator: 
19:45:04.718 [main] INFO  TextEditor operator create a Time object, you must use the new To: 
19:45:04.718 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.718 [main] INFO  TextEditor When you invoke new, Java creates the object and calls your constructor to initialize the instance variables. 
19:45:04.718 [main] INFO  TextEditor variables you invoke new, Java creates the object and calls your constructor to initialize the instance When. 
19:45:04.718 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.718 [main] INFO  TextEditor When the constructor is done, new returns a reference to the new object. 
19:45:04.718 [main] INFO  TextEditor object the constructor is done, new returns a reference to the new When. 
19:45:04.718 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.718 [main] INFO  TextEditor In this example, the reference gets assigned to the variable time, which has type Time. 
19:45:04.718 [main] INFO  TextEditor Time this example, the reference gets assigned to the variable time, which has type In. 
19:45:04.718 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.718 [main] INFO  TextEditor Figure 11.1 shows the result. 
19:45:04.718 [main] INFO  TextEditor result 11.1 shows the Figure. 
19:45:04.718 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.718 [main] INFO  TextEditor Figure 11.1: State diagram of a Time object. 
19:45:04.718 [main] INFO  TextEditor object 11.1: State diagram of a Time Figure. 
19:45:04.718 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.718 [main] INFO  TextEditor Beginners sometimes make the mistake of invoking new inside the constructor. 
19:45:04.718 [main] INFO  TextEditor constructor sometimes make the mistake of invoking new inside the Beginners. 
19:45:04.718 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.718 [main] INFO  TextEditor You don’t have to, and you shouldn’t. 
19:45:04.718 [main] INFO  TextEditor t don’t have to, and you shouldn’You. 
19:45:04.718 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.718 [main] INFO  TextEditor In this example, invoking new Time() in the constructor causes an infinite recursion: 
19:45:04.718 [main] INFO  TextEditor recursion this example, invoking new Time() in the constructor causes an infinite In: 
19:45:04.719 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.719 [main] INFO  TextEditor 11.3  More constructors 
19:45:04.719 [main] INFO  TextEditor 11.3  constructors More 
19:45:04.719 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.719 [main] INFO  TextEditor Like other methods, constructors can be overloaded, which means you can provide multiple constructors with different parameters. 
19:45:04.719 [main] INFO  TextEditor parameters other methods, constructors can be overloaded, which means you can provide multiple constructors with different Like. 
19:45:04.719 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.719 [main] INFO  TextEditor Java knows which constructor to invoke by matching the arguments you provide with the parameters of the constructors. 
19:45:04.719 [main] INFO  TextEditor constructors knows which constructor to invoke by matching the arguments you provide with the parameters of the Java. 
19:45:04.719 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.719 [main] INFO  TextEditor It is common to provide a constructor that takes no arguments, like the previous one, and a “value constructor”, like this one: 
19:45:04.719 [main] INFO  TextEditor one is common to provide a constructor that takes no arguments, like the previous one, and a “value constructor”, like this It: 
19:45:04.719 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.719 [main] INFO  TextEditor All this constructor does is copy values from the parameters to the instance variables. 
19:45:04.719 [main] INFO  TextEditor variables this constructor does is copy values from the parameters to the instance All. 
19:45:04.719 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.719 [main] INFO  TextEditor In this example, the names and types of the parameters are the same as the instance variables. 
19:45:04.719 [main] INFO  TextEditor variables this example, the names and types of the parameters are the same as the instance In. 
19:45:04.719 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.719 [main] INFO  TextEditor As a result, the parameters shadow (or hide) the instance variables, so the keyword this is necessary to tell them apart. 
19:45:04.719 [main] INFO  TextEditor apart a result, the parameters shadow (or hide) the instance variables, so the keyword this is necessary to tell them As. 
19:45:04.719 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.719 [main] INFO  TextEditor Parameters don’t have to use the same names, but that’s a common style. 
19:45:04.719 [main] INFO  TextEditor style don’t have to use the same names, but that’s a common Parameters. 
19:45:04.719 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.719 [main] INFO  TextEditor To invoke this second constructor, you have to provide arguments after the new operator. 
19:45:04.719 [main] INFO  TextEditor operator invoke this second constructor, you have to provide arguments after the new To. 
19:45:04.719 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.719 [main] INFO  TextEditor This example creates a Time object that represents a fraction of a second before noon: 
19:45:04.719 [main] INFO  TextEditor noon example creates a Time object that represents a fraction of a second before This: 
19:45:04.719 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.719 [main] INFO  TextEditor Overloading constructors provides the flexibility to create an object first and then fill in the attributes, or collect all the information before creating the object itself. 
19:45:04.719 [main] INFO  TextEditor itself constructors provides the flexibility to create an object first and then fill in the attributes, or collect all the information before creating the object Overloading. 
19:45:04.720 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.720 [main] INFO  TextEditor Once you get the hang of it, writing constructors gets boring. 
19:45:04.720 [main] INFO  TextEditor boring you get the hang of it, writing constructors gets Once. 
19:45:04.720 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.720 [main] INFO  TextEditor You can write them quickly just by looking at the list of instance variables. 
19:45:04.720 [main] INFO  TextEditor variables can write them quickly just by looking at the list of instance You. 
19:45:04.720 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.720 [main] INFO  TextEditor In fact, some IDEs can generate them for you. 
19:45:04.720 [main] INFO  TextEditor you fact, some IDEs can generate them for In. 
19:45:04.720 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.720 [main] INFO  TextEditor Pulling it all together, here is the complete class definition so far: 
19:45:04.720 [main] INFO  TextEditor far it all together, here is the complete class definition so Pulling: 
19:45:04.720 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.720 [main] INFO  TextEditor 11.4  Getters and setters 
19:45:04.720 [main] INFO  TextEditor 11.4  setters and Getters 
19:45:04.720 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.720 [main] INFO  TextEditor Recall that the instance variables of Time are private. 
19:45:04.720 [main] INFO  TextEditor private that the instance variables of Time are Recall. 
19:45:04.720 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.720 [main] INFO  TextEditor We can access them from within the Time class, but if we try to access them from another class, the compiler generates an error. 
19:45:04.720 [main] INFO  TextEditor error can access them from within the Time class, but if we try to access them from another class, the compiler generates an We. 
19:45:04.720 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.720 [main] INFO  TextEditor For example, here’s a new class called TimeClient, because a class that uses objects defined in another class is called a client: 
19:45:04.720 [main] INFO  TextEditor client example, here’s a new class called TimeClient, because a class that uses objects defined in another class is called a For: 
19:45:04.720 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.720 [main] INFO  TextEditor If you try to compile this code, you will get a message like hour has private access in Time. 
19:45:04.720 [main] INFO  TextEditor Time you try to compile this code, you will get a message like hour has private access in If. 
19:45:04.720 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.720 [main] INFO  TextEditor There are three ways to solve this problem: 
19:45:04.720 [main] INFO  TextEditor problem are three ways to solve this There: 
19:45:04.721 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.721 [main] INFO  TextEditor We could make the instance variables public. 
19:45:04.721 [main] INFO  TextEditor public could make the instance variables We. 
19:45:04.721 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.721 [main] INFO  TextEditor We could provide methods to access the instance variables. 
19:45:04.721 [main] INFO  TextEditor variables could provide methods to access the instance We. 
19:45:04.721 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.721 [main] INFO  TextEditor We could decide that it’s not a problem, and refuse to let other classes access the instance variables. 
19:45:04.721 [main] INFO  TextEditor variables could decide that it’s not a problem, and refuse to let other classes access the instance We. 
19:45:04.721 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.721 [main] INFO  TextEditor The first choice is appealing because it’s simple. 
19:45:04.721 [main] INFO  TextEditor simple first choice is appealing because it’s The. 
19:45:04.721 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.721 [main] INFO  TextEditor But the problem is that when Class A accesses the instance variables of Class B directly, A becomes “dependent” on B. 
19:45:04.721 [main] INFO  TextEditor B the problem is that when Class A accesses the instance variables of Class B directly, A becomes “dependent” on But. 
19:45:04.721 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.721 [main] INFO  TextEditor If anything in B changes later, it is likely that A will have to change, too. 
19:45:04.721 [main] INFO  TextEditor too anything in B changes later, it is likely that A will have to change, If. 
19:45:04.721 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.721 [main] INFO  TextEditor But if A only uses methods to interact with B, A and B are “independent”, which means that we can make changes in B without affecting A (as long as we don’t change the method signatures). 
19:45:04.721 [main] INFO  TextEditor signatures if A only uses methods to interact with B, A and B are “independent”, which means that we can make changes in B without affecting A (as long as we don’t change the method But). 
19:45:04.721 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.721 [main] INFO  TextEditor So if we decide that TimeClient should be able to read the instance variables of Time, we can provide methods to do it: 
19:45:04.721 [main] INFO  TextEditor it if we decide that TimeClient should be able to read the instance variables of Time, we can provide methods to do So: 
19:45:04.721 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.721 [main] INFO  TextEditor Methods like these are formally called “accessors”, but more commonly referred to as getters. 
19:45:04.721 [main] INFO  TextEditor getters like these are formally called “accessors”, but more commonly referred to as Methods. 
19:45:04.721 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.721 [main] INFO  TextEditor By convention, the method that gets a variable named something is called getSomething. 
19:45:04.721 [main] INFO  TextEditor getSomething convention, the method that gets a variable named something is called By. 
19:45:04.721 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.721 [main] INFO  TextEditor If we decide that TimeClient should also be able to modify the instance variables of Time, we can provide methods to do that, too: 
19:45:04.721 [main] INFO  TextEditor too we decide that TimeClient should also be able to modify the instance variables of Time, we can provide methods to do that, If: 
19:45:04.721 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.721 [main] INFO  TextEditor These methods are formally called “mutators”, but more commonly known as setters. 
19:45:04.721 [main] INFO  TextEditor setters methods are formally called “mutators”, but more commonly known as These. 
19:45:04.721 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.721 [main] INFO  TextEditor The naming convention is similar; 
19:45:04.722 [main] INFO  TextEditor similar naming convention is The; 
19:45:04.722 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.722 [main] INFO  TextEditor the method that sets something is usually called setSomething. 
19:45:04.722 [main] INFO  TextEditor setSomething method that sets something is usually called the. 
19:45:04.722 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.722 [main] INFO  TextEditor Writing getters and setters can get boring, but many IDEs can generate them for you based on the instance variables. 
19:45:04.722 [main] INFO  TextEditor variables getters and setters can get boring, but many IDEs can generate them for you based on the instance Writing. 
19:45:04.722 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.722 [main] INFO  TextEditor 11.5  Displaying objects 
19:45:04.722 [main] INFO  TextEditor 11.5  objects Displaying 
19:45:04.722 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.722 [main] INFO  TextEditor If you create a Time object and display it with println: 
19:45:04.722 [main] INFO  TextEditor println you create a Time object and display it with If: 
19:45:04.722 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.722 [main] INFO  TextEditor When Java displays the value of an object type, it displays the name of the type and the address of the object (in hexadecimal). 
19:45:04.722 [main] INFO  TextEditor hexadecimal Java displays the value of an object type, it displays the name of the type and the address of the object (in When). 
19:45:04.722 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.722 [main] INFO  TextEditor This address can be useful for debugging, if you want to keep track of individual objects. 
19:45:04.722 [main] INFO  TextEditor objects address can be useful for debugging, if you want to keep track of individual This. 
19:45:04.722 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.722 [main] INFO  TextEditor To display Time objects in a way that is more meaningful to users, you could write a method to display the hour, minute, and second. 
19:45:04.722 [main] INFO  TextEditor second display Time objects in a way that is more meaningful to users, you could write a method to display the hour, minute, and To. 
19:45:04.722 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.722 [main] INFO  TextEditor Using printTime in Section 4.6 as a starting point, we could write: 
19:45:04.722 [main] INFO  TextEditor write printTime in Section 4.6 as a starting point, we could Using: 
19:45:04.722 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.722 [main] INFO  TextEditor The output of this method, given the time object from the previous section, would be 11:59:59.9. 
19:45:04.722 [main] INFO  TextEditor be output of this method, given the time object from the previous section, would The 11:59:59.9. 
19:45:04.722 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.722 [main] INFO  TextEditor We can use printf to write it more concisely: 
19:45:04.722 [main] INFO  TextEditor concisely can use printf to write it more We: 
19:45:04.722 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.722 [main] INFO  TextEditor As a reminder, you need to use \%d with integers and \%f with floating-point numbers. 
19:45:04.722 [main] INFO  TextEditor numbers a reminder, you need to use \%d with integers and \%f with floating-point As. 
19:45:04.722 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.722 [main] INFO  TextEditor The 02 option means “total width 2, with leading zeros if necessary”, and the 04.1 option means “total width 4, one digit after the decimal point, leading zeros if necessary”. 
19:45:04.723 [main] INFO  TextEditor necessary 02 option means “total width 2, with leading zeros if necessary”, and the 04.1 option means “total width 4, one digit after the decimal point, leading zeros if The”. 
19:45:04.723 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.723 [main] INFO  TextEditor 11.6  The toString method 
19:45:04.723 [main] INFO  TextEditor 11.6  method toString The 
19:45:04.723 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.723 [main] INFO  TextEditor Every object type has a method called toString that returns a string representation of the object. 
19:45:04.723 [main] INFO  TextEditor object object type has a method called toString that returns a string representation of the Every. 
19:45:04.723 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.723 [main] INFO  TextEditor When you display an object using print or println, Java invokes the object’s toString method. 
19:45:04.723 [main] INFO  TextEditor method you display an object using print or println, Java invokes the object’s toString When. 
19:45:04.723 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.723 [main] INFO  TextEditor By default it simply displays the type of the object and its address, but you can override this behavior by providing your own toString method. 
19:45:04.723 [main] INFO  TextEditor method default it simply displays the type of the object and its address, but you can override this behavior by providing your own toString By. 
19:45:04.723 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.723 [main] INFO  TextEditor For example, here is a toString method for Time: 
19:45:04.723 [main] INFO  TextEditor Time example, here is a toString method for For: 
19:45:04.723 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.723 [main] INFO  TextEditor The definition does not have the keyword static, because it is not a static method. 
19:45:04.723 [main] INFO  TextEditor method definition does not have the keyword static, because it is not a static The. 
19:45:04.723 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.723 [main] INFO  TextEditor It is an instance method, so called because when you invoke it, you invoke it on an instance of the class (Time in this case). 
19:45:04.723 [main] INFO  TextEditor case is an instance method, so called because when you invoke it, you invoke it on an instance of the class (Time in this It). 
19:45:04.723 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.724 [main] INFO  TextEditor Instance methods are sometimes called “non-static”; 
19:45:04.724 [main] INFO  TextEditor static methods are sometimes called “non-Instance”; 
19:45:04.724 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.724 [main] INFO  TextEditor you might see this term in an error message. 
19:45:04.724 [main] INFO  TextEditor message might see this term in an error you. 
19:45:04.724 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.724 [main] INFO  TextEditor The body of the method is similar to printTime in the previous section, with two changes: 
19:45:04.724 [main] INFO  TextEditor changes body of the method is similar to printTime in the previous section, with two The: 
19:45:04.724 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.724 [main] INFO  TextEditor Inside the method, we use this to refer to the current instance; 
19:45:04.724 [main] INFO  TextEditor instance the method, we use this to refer to the current Inside; 
19:45:04.724 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.724 [main] INFO  TextEditor that is, the object the method is invoked on. 
19:45:04.724 [main] INFO  TextEditor on is, the object the method is invoked that. 
19:45:04.724 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.724 [main] INFO  TextEditor Instead of printf, it uses String.format, which returns a formatted String rather than displaying it. 
19:45:04.724 [main] INFO  TextEditor it of printf, it uses String.format, which returns a formatted String rather than displaying Instead. 
19:45:04.724 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.724 [main] INFO  TextEditor Now you can call toString directly: 
19:45:04.724 [main] INFO  TextEditor directly you can call toString Now: 
19:45:04.724 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.724 [main] INFO  TextEditor Or you can invoke it indirectly through println: 
19:45:04.724 [main] INFO  TextEditor println you can invoke it indirectly through Or: 
19:45:04.724 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.724 [main] INFO  TextEditor In this example, this in toString refers to the same object as time. 
19:45:04.724 [main] INFO  TextEditor time this example, this in toString refers to the same object as In. 
19:45:04.724 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.724 [main] INFO  TextEditor The output is 11:59:59.9. 
19:45:04.724 [main] INFO  TextEditor is output The 11:59:59.9. 
19:45:04.724 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.724 [main] INFO  TextEditor 11.7  The equals method 
19:45:04.724 [main] INFO  TextEditor 11.7  method equals The 
19:45:04.724 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.724 [main] INFO  TextEditor We have seen two ways to check whether values are equal: the == operator and the equals method. 
19:45:04.724 [main] INFO  TextEditor method have seen two ways to check whether values are equal: the == operator and the equals We. 
19:45:04.724 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.724 [main] INFO  TextEditor With objects you can use either one, but they are not the same. 
19:45:04.724 [main] INFO  TextEditor same objects you can use either one, but they are not the With. 
19:45:04.724 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.724 [main] INFO  TextEditor The equals method checks whether they are equivalent; 
19:45:04.724 [main] INFO  TextEditor equivalent equals method checks whether they are The; 
19:45:04.724 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.724 [main] INFO  TextEditor that is, whether they have the same value. 
19:45:04.725 [main] INFO  TextEditor value is, whether they have the same that. 
19:45:04.725 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.725 [main] INFO  TextEditor The definition of identity is always the same, so the == operator always does the same thing. 
19:45:04.725 [main] INFO  TextEditor thing definition of identity is always the same, so the == operator always does the same The. 
19:45:04.725 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.725 [main] INFO  TextEditor But the definition of equivalence is different for different objects, so objects can define their own equals methods. 
19:45:04.725 [main] INFO  TextEditor methods the definition of equivalence is different for different objects, so objects can define their own equals But. 
19:45:04.725 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.725 [main] INFO  TextEditor Consider the following variables: 
19:45:04.725 [main] INFO  TextEditor variables the following Consider: 
19:45:04.725 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.725 [main] INFO  TextEditor Figure 11.2 is a state diagram that shows these variables and their values. 
19:45:04.725 [main] INFO  TextEditor values 11.2 is a state diagram that shows these variables and their Figure. 
19:45:04.725 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.725 [main] INFO  TextEditor Figure 11.2: State diagram of three Time variables. 
19:45:04.725 [main] INFO  TextEditor variables 11.2: State diagram of three Time Figure. 
19:45:04.725 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.725 [main] INFO  TextEditor The assignment operator copies references, so time1 and time2 refer to the same object. 
19:45:04.725 [main] INFO  TextEditor object assignment operator copies references, so time1 and time2 refer to the same The. 
19:45:04.725 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.725 [main] INFO  TextEditor Because they are identical, time1 == time2 is true. 
19:45:04.725 [main] INFO  TextEditor true they are identical, time1 == time2 is Because. 
19:45:04.725 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.725 [main] INFO  TextEditor But time1 and time3 refer to different objects. 
19:45:04.725 [main] INFO  TextEditor objects time1 and time3 refer to different But. 
19:45:04.725 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.725 [main] INFO  TextEditor Because they are not identical, time1 == time3 is false. 
19:45:04.725 [main] INFO  TextEditor false they are not identical, time1 == time3 is Because. 
19:45:04.725 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.725 [main] INFO  TextEditor By default, the equals method does the same thing as ==. 
19:45:04.725 [main] INFO  TextEditor as default, the equals method does the same thing By ==. 
19:45:04.725 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.725 [main] INFO  TextEditor For Time objects, that’s probably not what we want. 
19:45:04.725 [main] INFO  TextEditor want Time objects, that’s probably not what we For. 
19:45:04.725 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.725 [main] INFO  TextEditor For example, time1 and time3 represent the same time of day, so we should consider them equivalent. 
19:45:04.725 [main] INFO  TextEditor equivalent example, time1 and time3 represent the same time of day, so we should consider them For. 
19:45:04.725 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.725 [main] INFO  TextEditor We can provide an equals method that implements this notion of equivalence: 
19:45:04.725 [main] INFO  TextEditor equivalence can provide an equals method that implements this notion of We: 
19:45:04.725 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.725 [main] INFO  TextEditor equals is an instance method, so it uses this to refer to the current object and it doesn’t have the keyword static. 
19:45:04.725 [main] INFO  TextEditor static is an instance method, so it uses this to refer to the current object and it doesn’t have the keyword equals. 
19:45:04.725 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.725 [main] INFO  TextEditor We can invoke equals as follows: 
19:45:04.725 [main] INFO  TextEditor follows can invoke equals as We: 
19:45:04.726 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.726 [main] INFO  TextEditor Inside the equals method, this refers to the same object as time1, and that refers to the same object as time3. 
19:45:04.726 [main] INFO  TextEditor as the equals method, this refers to the same object as time1, and that refers to the same object Inside time3. 
19:45:04.726 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.726 [main] INFO  TextEditor Since their instance variables are equal, the result is true. 
19:45:04.726 [main] INFO  TextEditor true their instance variables are equal, the result is Since. 
19:45:04.726 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.726 [main] INFO  TextEditor Many objects use a similar notion of equivalence; 
19:45:04.726 [main] INFO  TextEditor equivalence objects use a similar notion of Many; 
19:45:04.726 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.726 [main] INFO  TextEditor that is, two objects are equivalent if their instance variables are equal. 
19:45:04.726 [main] INFO  TextEditor equal is, two objects are equivalent if their instance variables are that. 
19:45:04.726 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.726 [main] INFO  TextEditor But other definitions are possible. 
19:45:04.726 [main] INFO  TextEditor possible other definitions are But. 
19:45:04.726 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.726 [main] INFO  TextEditor 11.8  Adding times 
19:45:04.726 [main] INFO  TextEditor 11.8  times Adding 
19:45:04.726 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.726 [main] INFO  TextEditor Suppose you are going to a movie that starts at 18:50 (or 6:50 PM), and the running time is 2 hours 16 minutes. 
19:45:04.726 [main] INFO  TextEditor minutes you are going to a movie that starts at 18:50 (or 6:50 PM), and the running time is 2 hours 16 Suppose. 
19:45:04.726 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.726 [main] INFO  TextEditor What time does the movie end? 
19:45:04.726 [main] INFO  TextEditor end time does the movie What? 
19:45:04.726 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.726 [main] INFO  TextEditor We’ll use Time objects to figure it out. 
19:45:04.726 [main] INFO  TextEditor out’ll use Time objects to figure it We. 
19:45:04.726 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.726 [main] INFO  TextEditor Here are two ways we could “add” Time objects: 
19:45:04.726 [main] INFO  TextEditor objects are two ways we could “add” Time Here: 
19:45:04.726 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.726 [main] INFO  TextEditor We could write a static method that takes the two Time objects as parameters. 
19:45:04.726 [main] INFO  TextEditor parameters could write a static method that takes the two Time objects as We. 
19:45:04.726 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.726 [main] INFO  TextEditor We could write an instance method that gets invoked on one object and takes the other as a parameter. 
19:45:04.726 [main] INFO  TextEditor parameter could write an instance method that gets invoked on one object and takes the other as a We. 
19:45:04.726 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.726 [main] INFO  TextEditor To demonstrate the difference, we’ll do both. 
19:45:04.726 [main] INFO  TextEditor both demonstrate the difference, we’ll do To. 
19:45:04.726 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.726 [main] INFO  TextEditor Here is a rough draft that uses the static approach: 
19:45:04.727 [main] INFO  TextEditor approach is a rough draft that uses the static Here: 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor And here’s how we would invoke the static method: 
19:45:04.727 [main] INFO  TextEditor method here’s how we would invoke the static And: 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor On the other hand, here’s what it looks like as an instance method: 
19:45:04.727 [main] INFO  TextEditor method the other hand, here’s what it looks like as an instance On: 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor The changes are: 
19:45:04.727 [main] INFO  TextEditor are changes The: 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor We removed the keyword static. 
19:45:04.727 [main] INFO  TextEditor static removed the keyword We. 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor We removed the first parameter. 
19:45:04.727 [main] INFO  TextEditor parameter removed the first We. 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor We replaced t1 with this. 
19:45:04.727 [main] INFO  TextEditor this replaced t1 with We. 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor Optionally, you could replace t2 with that. 
19:45:04.727 [main] INFO  TextEditor that, you could replace t2 with Optionally. 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor Unlike this, that is not a keyword; 
19:45:04.727 [main] INFO  TextEditor keyword this, that is not a Unlike; 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor it’s just a slightly clever variable name. 
19:45:04.727 [main] INFO  TextEditor name’s just a slightly clever variable it. 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor And here’s how we would invoke the instance method: 
19:45:04.727 [main] INFO  TextEditor method here’s how we would invoke the instance And: 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor That’s all there is to it. 
19:45:04.727 [main] INFO  TextEditor it’s all there is to That. 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor Static methods and instance methods do the same thing, and you can convert from one to the other with just a few changes. 
19:45:04.727 [main] INFO  TextEditor changes methods and instance methods do the same thing, and you can convert from one to the other with just a few Static. 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor There’s only one problem: the addition code itself is not correct. 
19:45:04.727 [main] INFO  TextEditor correct’s only one problem: the addition code itself is not There. 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor For this example, it returns 20:66, which is not a valid time. 
19:45:04.727 [main] INFO  TextEditor time this example, it returns 20:66, which is not a valid For. 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor If second exceeds 59, we have to “carry” into the minutes column, and if minute exceeds 59, we have to carry into hour. 
19:45:04.727 [main] INFO  TextEditor hour second exceeds 59, we have to “carry” into the minutes column, and if minute exceeds 59, we have to carry into If. 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor Here is a better version of add: 
19:45:04.727 [main] INFO  TextEditor add is a better version of Here: 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor It’s still possible that hour may exceed 23, but there’s no days attribute to carry into. 
19:45:04.727 [main] INFO  TextEditor into’s still possible that hour may exceed 23, but there’s no days attribute to carry It. 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.727 [main] INFO  TextEditor In that case, sum.hour -= 24 would yield the correct result. 
19:45:04.727 [main] INFO  TextEditor result that case, sum.hour -= 24 would yield the correct In. 
19:45:04.727 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.728 [main] INFO  TextEditor 11.9  Pure methods and modifiers 
19:45:04.728 [main] INFO  TextEditor 11.9  modifiers methods and Pure 
19:45:04.728 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.728 [main] INFO  TextEditor This implementation of add does not modify either of the parameters. 
19:45:04.728 [main] INFO  TextEditor parameters implementation of add does not modify either of the This. 
19:45:04.728 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.728 [main] INFO  TextEditor Instead, it creates and returns a new Time object. 
19:45:04.728 [main] INFO  TextEditor object, it creates and returns a new Time Instead. 
19:45:04.728 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.728 [main] INFO  TextEditor As an alternative, we could have written a method like this: 
19:45:04.728 [main] INFO  TextEditor this an alternative, we could have written a method like As: 
19:45:04.728 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.728 [main] INFO  TextEditor The increment method modifies an existing Time object. 
19:45:04.728 [main] INFO  TextEditor object increment method modifies an existing Time The. 
19:45:04.728 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.728 [main] INFO  TextEditor It doesn’t create a new one, and it doesn’t return anything. 
19:45:04.728 [main] INFO  TextEditor anything doesn’t create a new one, and it doesn’t return It. 
19:45:04.728 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.728 [main] INFO  TextEditor In contrast, methods like add are called pure because: 
19:45:04.728 [main] INFO  TextEditor because contrast, methods like add are called pure In: 
19:45:04.728 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.728 [main] INFO  TextEditor They don’t modify the parameters. 
19:45:04.728 [main] INFO  TextEditor parameters don’t modify the They. 
19:45:04.728 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.728 [main] INFO  TextEditor They don’t have any other “side effects”, like printing. 
19:45:04.728 [main] INFO  TextEditor printing don’t have any other “side effects”, like They. 
19:45:04.728 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.728 [main] INFO  TextEditor The return value only depends on the parameters, not on any other state. 
19:45:04.728 [main] INFO  TextEditor state return value only depends on the parameters, not on any other The. 
19:45:04.728 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.728 [main] INFO  TextEditor Methods like increment, which breaks the first rule, are sometimes called modifiers. 
19:45:04.728 [main] INFO  TextEditor modifiers like increment, which breaks the first rule, are sometimes called Methods. 
19:45:04.728 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.728 [main] INFO  TextEditor They are usually void methods, but sometimes they return a reference to the object they modify. 
19:45:04.728 [main] INFO  TextEditor modify are usually void methods, but sometimes they return a reference to the object they They. 
19:45:04.728 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.728 [main] INFO  TextEditor Modifiers can be more efficient because they don’t create new objects. 
19:45:04.728 [main] INFO  TextEditor objects can be more efficient because they don’t create new Modifiers. 
19:45:04.728 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.728 [main] INFO  TextEditor But they can also be error-prone. 
19:45:04.728 [main] INFO  TextEditor prone they can also be error-But. 
19:45:04.728 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.728 [main] INFO  TextEditor When objects are aliased, the effects of modifiers can be confusing. 
19:45:04.728 [main] INFO  TextEditor confusing objects are aliased, the effects of modifiers can be When. 
19:45:04.728 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.728 [main] INFO  TextEditor To make a class immutable, like String, you can provide getters but no setters and pure methods but no modifiers. 
19:45:04.728 [main] INFO  TextEditor modifiers make a class immutable, like String, you can provide getters but no setters and pure methods but no To. 
19:45:04.728 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:04.728 [main] INFO  TextEditor Immutable objects can be more difficult to work with, at first, but they can save you from long hours of debugging. 
19:45:04.728 [main] INFO  TextEditor debugging objects can be more difficult to work with, at first, but they can save you from long hours of Immutable. 
19:45:04.729 [main] INFO  App        
Menu:
1. - Print text
2. - Find max number of sentences with same word (func. 1)
3. - Sort sentences (func. 2)
4. - Print words with length from interrogative sentences (func. 4)
5. - Swap first and last word in sentence (func. 5)
6. - Vowel words are sorted by first consonant letter (func. 8)
7. - Words are sorted by letter frequency (func. 9)
8. - Exit
Select: 
19:45:05.888 [main] INFO  TextEditor  Swap first and last word in sentence (func. 5)
19:45:05.888 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.888 [main] INFO  TextEditor Classes 11 Chapter 
19:45:05.889 [main] INFO  TextEditor Chapter 11 Classes 
19:45:05.889 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.889 [main] INFO  TextEditor name you define a new class, you also create a new type with the same Whenever. 
19:45:05.889 [main] INFO  TextEditor Whenever you define a new class, you also create a new type with the same name. 
19:45:05.889 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.889 [main] INFO  TextEditor Hello way back in Section 1.4, when we defined the class Hello, we created a type named So. 
19:45:05.889 [main] INFO  TextEditor So way back in Section 1.4, when we defined the class Hello, we created a type named Hello. 
19:45:05.889 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.889 [main] INFO  TextEditor object didn’t declare any variables with type Hello, and we didn’t use new to create a Hello We. 
19:45:05.889 [main] INFO  TextEditor We didn’t declare any variables with type Hello, and we didn’t use new to create a Hello object. 
19:45:05.889 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.889 [main] INFO  TextEditor have wouldn’t have done much if we had – but we could It! 
19:45:05.889 [main] INFO  TextEditor It wouldn’t have done much if we had – but we could have! 
19:45:05.889 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.889 [main] INFO  TextEditor types this chapter, we will define classes that represent useful object In. 
19:45:05.889 [main] INFO  TextEditor In this chapter, we will define classes that represent useful object types. 
19:45:05.889 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.889 [main] INFO  TextEditor objects will also clarify the difference between classes and We. 
19:45:05.889 [main] INFO  TextEditor We will also clarify the difference between classes and objects. 
19:45:05.889 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.889 [main] INFO  TextEditor ideas are the most important Here: 
19:45:05.889 [main] INFO  TextEditor Here are the most important ideas: 
19:45:05.889 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.889 [main] INFO  TextEditor name a class creates a new object type with the same Defining. 
19:45:05.889 [main] INFO  TextEditor Defining a class creates a new object type with the same name. 
19:45:05.889 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.889 [main] INFO  TextEditor type object belongs to some object Every; 
19:45:05.889 [main] INFO  TextEditor Every object belongs to some object type; 
19:45:05.889 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.889 [main] INFO  TextEditor class is, it is an instance of some that? 
19:45:05.890 [main] INFO  TextEditor that is, it is an instance of some class? 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor them class definition is like a template for objects: it specifies what attributes the objects have and what methods can operate on A. 
19:45:05.890 [main] INFO  TextEditor A class definition is like a template for objects: it specifies what attributes the objects have and what methods can operate on them. 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor class new operator instantiates objects, that is, it creates new instances of a The? 
19:45:05.890 [main] INFO  TextEditor The new operator instantiates objects, that is, it creates new instances of a class? 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor houses of a class like a blueprint for a house: you can use the same blueprint to build any number of Think? 
19:45:05.890 [main] INFO  TextEditor Think of a class like a blueprint for a house: you can use the same blueprint to build any number of houses? 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor object methods that operate on an object type are defined in the class for that The. 
19:45:05.890 [main] INFO  TextEditor The methods that operate on an object type are defined in the class for that object. 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor 11.1  class Time The 
19:45:05.890 [main] INFO  TextEditor 11.1  The Time class 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor unit common reason to define a new class is to encapsulate related data in an object that can be treated as a single One. 
19:45:05.890 [main] INFO  TextEditor One common reason to define a new class is to encapsulate related data in an object that can be treated as a single unit. 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor values way, we can use objects as parameters and return values, rather than passing and returning multiple That. 
19:45:05.890 [main] INFO  TextEditor That way, we can use objects as parameters and return values, rather than passing and returning multiple values. 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor encapsulation design principle is called data This. 
19:45:05.890 [main] INFO  TextEditor This design principle is called data encapsulation. 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor Rectangle have already seen two types that encapsulate data in this way: Point and We. 
19:45:05.890 [main] INFO  TextEditor We have already seen two types that encapsulate data in this way: Point and Rectangle. 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor day example, which we will implement ourselves, is Time, which represents a time of Another. 
19:45:05.890 [main] INFO  TextEditor Another example, which we will implement ourselves, is Time, which represents a time of day. 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor seconds data encapsulated in a Time object are an hour, a minute, and a number of The. 
19:45:05.890 [main] INFO  TextEditor The data encapsulated in a Time object are an hour, a minute, and a number of seconds. 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor them every Time object contains these data, we define attributes to hold Because. 
19:45:05.890 [main] INFO  TextEditor Because every Time object contains these data, we define attributes to hold them. 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor Section are also called instance variables, because each instance has its own variables (as opposed to class variables, coming up in Attributes 12.3). 
19:45:05.890 [main] INFO  TextEditor Attributes are also called instance variables, because each instance has its own variables (as opposed to class variables, coming up in Section 12.3). 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor be first step is to decide what type each variable should The. 
19:45:05.890 [main] INFO  TextEditor The first step is to decide what type each variable should be. 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor integers seems clear that hour and minute should be It. 
19:45:05.890 [main] INFO  TextEditor It seems clear that hour and minute should be integers. 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor double to keep things interesting, let’s make second a Just. 
19:45:05.890 [main] INFO  TextEditor Just to keep things interesting, let’s make second a double. 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor method variables are declared at the beginning of the class definition, outside of any Instance. 
19:45:05.890 [main] INFO  TextEditor Instance variables are declared at the beginning of the class definition, outside of any method. 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor definition itself, this code fragment is a legal class By: 
19:45:05.890 [main] INFO  TextEditor By itself, this code fragment is a legal class definition: 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.890 [main] INFO  TextEditor classes Time class is public, which means that it can be used in other The. 
19:45:05.890 [main] INFO  TextEditor The Time class is public, which means that it can be used in other classes. 
19:45:05.890 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor class the instance variables are private, which means they can only be accessed from inside the Time But. 
19:45:05.891 [main] INFO  TextEditor But the instance variables are private, which means they can only be accessed from inside the Time class. 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor error you try to read or write them from another class, you will get a compiler If. 
19:45:05.891 [main] INFO  TextEditor If you try to read or write them from another class, you will get a compiler error. 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor classes instance variables help keep classes isolated from each other so that changes in one class won’t require changes in other Private. 
19:45:05.891 [main] INFO  TextEditor Private instance variables help keep classes isolated from each other so that changes in one class won’t require changes in other classes. 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor classes also simplifies what other programmers need to understand in order to use your It. 
19:45:05.891 [main] INFO  TextEditor It also simplifies what other programmers need to understand in order to use your classes. 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor hiding kind of isolation is called information This. 
19:45:05.891 [main] INFO  TextEditor This kind of isolation is called information hiding. 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor 11.2  Constructors 
19:45:05.891 [main] INFO  TextEditor 11.2  Constructors 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor variables declaring the instance variables, the next step is to define a constructor, which is a special method that initializes the instance After. 
19:45:05.891 [main] INFO  TextEditor After declaring the instance variables, the next step is to define a constructor, which is a special method that initializes the instance variables. 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor except syntax for constructors is similar to that of other methods, The: 
19:45:05.891 [main] INFO  TextEditor The syntax for constructors is similar to that of other methods, except: 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor class name of the constructor is the same as the name of the The. 
19:45:05.891 [main] INFO  TextEditor The name of the constructor is the same as the name of the class. 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor value have no return type (and no return Constructors). 
19:45:05.891 [main] INFO  TextEditor Constructors have no return type (and no return value). 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor omitted keyword static is The. 
19:45:05.891 [main] INFO  TextEditor The keyword static is omitted. 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor class is an example constructor for the Time Here: 
19:45:05.891 [main] INFO  TextEditor Here is an example constructor for the Time class: 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor arguments constructor does not take any This. 
19:45:05.891 [main] INFO  TextEditor This constructor does not take any arguments. 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor midnight line initializes an instance variable to zero (which in this example means Each). 
19:45:05.891 [main] INFO  TextEditor Each line initializes an instance variable to zero (which in this example means midnight). 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor creating name this is a keyword that refers to the object we are The. 
19:45:05.891 [main] INFO  TextEditor The name this is a keyword that refers to the object we are creating. 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor object can use this the same way you use the name of any other You. 
19:45:05.891 [main] INFO  TextEditor You can use this the same way you use the name of any other object. 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor methods example, you can read and write the instance variables of this, and you can pass this as an argument to other For. 
19:45:05.891 [main] INFO  TextEditor For example, you can read and write the instance variables of this, and you can pass this as an argument to other methods. 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor it you do not declare this, and you can’t make an assignment to But. 
19:45:05.891 [main] INFO  TextEditor But you do not declare this, and you can’t make an assignment to it. 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor end common error when writing constructors is to put a return statement at the A. 
19:45:05.891 [main] INFO  TextEditor A common error when writing constructors is to put a return statement at the end. 
19:45:05.891 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.891 [main] INFO  TextEditor values void methods, constructors do not return Like. 
19:45:05.891 [main] INFO  TextEditor Like void methods, constructors do not return values. 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor operator create a Time object, you must use the new To: 
19:45:05.892 [main] INFO  TextEditor To create a Time object, you must use the new operator: 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor variables you invoke new, Java creates the object and calls your constructor to initialize the instance When. 
19:45:05.892 [main] INFO  TextEditor When you invoke new, Java creates the object and calls your constructor to initialize the instance variables. 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor object the constructor is done, new returns a reference to the new When. 
19:45:05.892 [main] INFO  TextEditor When the constructor is done, new returns a reference to the new object. 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor Time this example, the reference gets assigned to the variable time, which has type In. 
19:45:05.892 [main] INFO  TextEditor In this example, the reference gets assigned to the variable time, which has type Time. 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor result 11.1 shows the Figure. 
19:45:05.892 [main] INFO  TextEditor Figure 11.1 shows the result. 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor object 11.1: State diagram of a Time Figure. 
19:45:05.892 [main] INFO  TextEditor Figure 11.1: State diagram of a Time object. 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor constructor sometimes make the mistake of invoking new inside the Beginners. 
19:45:05.892 [main] INFO  TextEditor Beginners sometimes make the mistake of invoking new inside the constructor. 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor t don’t have to, and you shouldn’You. 
19:45:05.892 [main] INFO  TextEditor You don’t have to, and you shouldn’t. 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor recursion this example, invoking new Time() in the constructor causes an infinite In: 
19:45:05.892 [main] INFO  TextEditor In this example, invoking new Time() in the constructor causes an infinite recursion: 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor 11.3  constructors More 
19:45:05.892 [main] INFO  TextEditor 11.3  More constructors 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor parameters other methods, constructors can be overloaded, which means you can provide multiple constructors with different Like. 
19:45:05.892 [main] INFO  TextEditor Like other methods, constructors can be overloaded, which means you can provide multiple constructors with different parameters. 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor constructors knows which constructor to invoke by matching the arguments you provide with the parameters of the Java. 
19:45:05.892 [main] INFO  TextEditor Java knows which constructor to invoke by matching the arguments you provide with the parameters of the constructors. 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor one is common to provide a constructor that takes no arguments, like the previous one, and a “value constructor”, like this It: 
19:45:05.892 [main] INFO  TextEditor It is common to provide a constructor that takes no arguments, like the previous one, and a “value constructor”, like this one: 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor variables this constructor does is copy values from the parameters to the instance All. 
19:45:05.892 [main] INFO  TextEditor All this constructor does is copy values from the parameters to the instance variables. 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor variables this example, the names and types of the parameters are the same as the instance In. 
19:45:05.892 [main] INFO  TextEditor In this example, the names and types of the parameters are the same as the instance variables. 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor apart a result, the parameters shadow (or hide) the instance variables, so the keyword this is necessary to tell them As. 
19:45:05.892 [main] INFO  TextEditor As a result, the parameters shadow (or hide) the instance variables, so the keyword this is necessary to tell them apart. 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor style don’t have to use the same names, but that’s a common Parameters. 
19:45:05.892 [main] INFO  TextEditor Parameters don’t have to use the same names, but that’s a common style. 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor operator invoke this second constructor, you have to provide arguments after the new To. 
19:45:05.892 [main] INFO  TextEditor To invoke this second constructor, you have to provide arguments after the new operator. 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.892 [main] INFO  TextEditor noon example creates a Time object that represents a fraction of a second before This: 
19:45:05.892 [main] INFO  TextEditor This example creates a Time object that represents a fraction of a second before noon: 
19:45:05.892 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor itself constructors provides the flexibility to create an object first and then fill in the attributes, or collect all the information before creating the object Overloading. 
19:45:05.893 [main] INFO  TextEditor Overloading constructors provides the flexibility to create an object first and then fill in the attributes, or collect all the information before creating the object itself. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor boring you get the hang of it, writing constructors gets Once. 
19:45:05.893 [main] INFO  TextEditor Once you get the hang of it, writing constructors gets boring. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor variables can write them quickly just by looking at the list of instance You. 
19:45:05.893 [main] INFO  TextEditor You can write them quickly just by looking at the list of instance variables. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor you fact, some IDEs can generate them for In. 
19:45:05.893 [main] INFO  TextEditor In fact, some IDEs can generate them for you. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor far it all together, here is the complete class definition so Pulling: 
19:45:05.893 [main] INFO  TextEditor Pulling it all together, here is the complete class definition so far: 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor 11.4  setters and Getters 
19:45:05.893 [main] INFO  TextEditor 11.4  Getters and setters 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor private that the instance variables of Time are Recall. 
19:45:05.893 [main] INFO  TextEditor Recall that the instance variables of Time are private. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor error can access them from within the Time class, but if we try to access them from another class, the compiler generates an We. 
19:45:05.893 [main] INFO  TextEditor We can access them from within the Time class, but if we try to access them from another class, the compiler generates an error. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor client example, here’s a new class called TimeClient, because a class that uses objects defined in another class is called a For: 
19:45:05.893 [main] INFO  TextEditor For example, here’s a new class called TimeClient, because a class that uses objects defined in another class is called a client: 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor Time you try to compile this code, you will get a message like hour has private access in If. 
19:45:05.893 [main] INFO  TextEditor If you try to compile this code, you will get a message like hour has private access in Time. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor problem are three ways to solve this There: 
19:45:05.893 [main] INFO  TextEditor There are three ways to solve this problem: 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor public could make the instance variables We. 
19:45:05.893 [main] INFO  TextEditor We could make the instance variables public. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor variables could provide methods to access the instance We. 
19:45:05.893 [main] INFO  TextEditor We could provide methods to access the instance variables. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor variables could decide that it’s not a problem, and refuse to let other classes access the instance We. 
19:45:05.893 [main] INFO  TextEditor We could decide that it’s not a problem, and refuse to let other classes access the instance variables. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor simple first choice is appealing because it’s The. 
19:45:05.893 [main] INFO  TextEditor The first choice is appealing because it’s simple. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor B the problem is that when Class A accesses the instance variables of Class B directly, A becomes “dependent” on But. 
19:45:05.893 [main] INFO  TextEditor But the problem is that when Class A accesses the instance variables of Class B directly, A becomes “dependent” on B. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor too anything in B changes later, it is likely that A will have to change, If. 
19:45:05.893 [main] INFO  TextEditor If anything in B changes later, it is likely that A will have to change, too. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor signatures if A only uses methods to interact with B, A and B are “independent”, which means that we can make changes in B without affecting A (as long as we don’t change the method But). 
19:45:05.893 [main] INFO  TextEditor But if A only uses methods to interact with B, A and B are “independent”, which means that we can make changes in B without affecting A (as long as we don’t change the method signatures). 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor it if we decide that TimeClient should be able to read the instance variables of Time, we can provide methods to do So: 
19:45:05.893 [main] INFO  TextEditor So if we decide that TimeClient should be able to read the instance variables of Time, we can provide methods to do it: 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor getters like these are formally called “accessors”, but more commonly referred to as Methods. 
19:45:05.893 [main] INFO  TextEditor Methods like these are formally called “accessors”, but more commonly referred to as getters. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor getSomething convention, the method that gets a variable named something is called By. 
19:45:05.893 [main] INFO  TextEditor By convention, the method that gets a variable named something is called getSomething. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor too we decide that TimeClient should also be able to modify the instance variables of Time, we can provide methods to do that, If: 
19:45:05.893 [main] INFO  TextEditor If we decide that TimeClient should also be able to modify the instance variables of Time, we can provide methods to do that, too: 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor setters methods are formally called “mutators”, but more commonly known as These. 
19:45:05.893 [main] INFO  TextEditor These methods are formally called “mutators”, but more commonly known as setters. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor similar naming convention is The; 
19:45:05.893 [main] INFO  TextEditor The naming convention is similar; 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor setSomething method that sets something is usually called the. 
19:45:05.893 [main] INFO  TextEditor the method that sets something is usually called setSomething. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor variables getters and setters can get boring, but many IDEs can generate them for you based on the instance Writing. 
19:45:05.893 [main] INFO  TextEditor Writing getters and setters can get boring, but many IDEs can generate them for you based on the instance variables. 
19:45:05.893 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.893 [main] INFO  TextEditor 11.5  objects Displaying 
19:45:05.894 [main] INFO  TextEditor 11.5  Displaying objects 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor println you create a Time object and display it with If: 
19:45:05.894 [main] INFO  TextEditor If you create a Time object and display it with println: 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor hexadecimal Java displays the value of an object type, it displays the name of the type and the address of the object (in When). 
19:45:05.894 [main] INFO  TextEditor When Java displays the value of an object type, it displays the name of the type and the address of the object (in hexadecimal). 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor objects address can be useful for debugging, if you want to keep track of individual This. 
19:45:05.894 [main] INFO  TextEditor This address can be useful for debugging, if you want to keep track of individual objects. 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor second display Time objects in a way that is more meaningful to users, you could write a method to display the hour, minute, and To. 
19:45:05.894 [main] INFO  TextEditor To display Time objects in a way that is more meaningful to users, you could write a method to display the hour, minute, and second. 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor write printTime in Section 4.6 as a starting point, we could Using: 
19:45:05.894 [main] INFO  TextEditor Using printTime in Section 4.6 as a starting point, we could write: 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor be output of this method, given the time object from the previous section, would The 11:59:59.9. 
19:45:05.894 [main] INFO  TextEditor The output of this method, given the time object from the previous section, would be 11:59:59.9. 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor concisely can use printf to write it more We: 
19:45:05.894 [main] INFO  TextEditor We can use printf to write it more concisely: 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor numbers a reminder, you need to use \%d with integers and \%f with floating-point As. 
19:45:05.894 [main] INFO  TextEditor As a reminder, you need to use \%d with integers and \%f with floating-point numbers. 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor necessary 02 option means “total width 2, with leading zeros if necessary”, and the 04.1 option means “total width 4, one digit after the decimal point, leading zeros if The”. 
19:45:05.894 [main] INFO  TextEditor The 02 option means “total width 2, with leading zeros if necessary”, and the 04.1 option means “total width 4, one digit after the decimal point, leading zeros if necessary”. 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor 11.6  method toString The 
19:45:05.894 [main] INFO  TextEditor 11.6  The toString method 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor object object type has a method called toString that returns a string representation of the Every. 
19:45:05.894 [main] INFO  TextEditor Every object type has a method called toString that returns a string representation of the object. 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor method you display an object using print or println, Java invokes the object’s toString When. 
19:45:05.894 [main] INFO  TextEditor When you display an object using print or println, Java invokes the object’s toString method. 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor method default it simply displays the type of the object and its address, but you can override this behavior by providing your own toString By. 
19:45:05.894 [main] INFO  TextEditor By default it simply displays the type of the object and its address, but you can override this behavior by providing your own toString method. 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor Time example, here is a toString method for For: 
19:45:05.894 [main] INFO  TextEditor For example, here is a toString method for Time: 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor method definition does not have the keyword static, because it is not a static The. 
19:45:05.894 [main] INFO  TextEditor The definition does not have the keyword static, because it is not a static method. 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor case is an instance method, so called because when you invoke it, you invoke it on an instance of the class (Time in this It). 
19:45:05.894 [main] INFO  TextEditor It is an instance method, so called because when you invoke it, you invoke it on an instance of the class (Time in this case). 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor static methods are sometimes called “non-Instance”; 
19:45:05.894 [main] INFO  TextEditor Instance methods are sometimes called “non-static”; 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor message might see this term in an error you. 
19:45:05.894 [main] INFO  TextEditor you might see this term in an error message. 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor changes body of the method is similar to printTime in the previous section, with two The: 
19:45:05.894 [main] INFO  TextEditor The body of the method is similar to printTime in the previous section, with two changes: 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor instance the method, we use this to refer to the current Inside; 
19:45:05.894 [main] INFO  TextEditor Inside the method, we use this to refer to the current instance; 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor on is, the object the method is invoked that. 
19:45:05.894 [main] INFO  TextEditor that is, the object the method is invoked on. 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor it of printf, it uses String.format, which returns a formatted String rather than displaying Instead. 
19:45:05.894 [main] INFO  TextEditor Instead of printf, it uses String.format, which returns a formatted String rather than displaying it. 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor directly you can call toString Now: 
19:45:05.894 [main] INFO  TextEditor Now you can call toString directly: 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor println you can invoke it indirectly through Or: 
19:45:05.894 [main] INFO  TextEditor Or you can invoke it indirectly through println: 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor time this example, this in toString refers to the same object as In. 
19:45:05.894 [main] INFO  TextEditor In this example, this in toString refers to the same object as time. 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor is output The 11:59:59.9. 
19:45:05.894 [main] INFO  TextEditor The output is 11:59:59.9. 
19:45:05.894 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.894 [main] INFO  TextEditor 11.7  method equals The 
19:45:05.895 [main] INFO  TextEditor 11.7  The equals method 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor method have seen two ways to check whether values are equal: the == operator and the equals We. 
19:45:05.895 [main] INFO  TextEditor We have seen two ways to check whether values are equal: the == operator and the equals method. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor same objects you can use either one, but they are not the With. 
19:45:05.895 [main] INFO  TextEditor With objects you can use either one, but they are not the same. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor equivalent equals method checks whether they are The; 
19:45:05.895 [main] INFO  TextEditor The equals method checks whether they are equivalent; 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor value is, whether they have the same that. 
19:45:05.895 [main] INFO  TextEditor that is, whether they have the same value. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor thing definition of identity is always the same, so the == operator always does the same The. 
19:45:05.895 [main] INFO  TextEditor The definition of identity is always the same, so the == operator always does the same thing. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor methods the definition of equivalence is different for different objects, so objects can define their own equals But. 
19:45:05.895 [main] INFO  TextEditor But the definition of equivalence is different for different objects, so objects can define their own equals methods. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor variables the following Consider: 
19:45:05.895 [main] INFO  TextEditor Consider the following variables: 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor values 11.2 is a state diagram that shows these variables and their Figure. 
19:45:05.895 [main] INFO  TextEditor Figure 11.2 is a state diagram that shows these variables and their values. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor variables 11.2: State diagram of three Time Figure. 
19:45:05.895 [main] INFO  TextEditor Figure 11.2: State diagram of three Time variables. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor object assignment operator copies references, so time1 and time2 refer to the same The. 
19:45:05.895 [main] INFO  TextEditor The assignment operator copies references, so time1 and time2 refer to the same object. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor true they are identical, time1 == time2 is Because. 
19:45:05.895 [main] INFO  TextEditor Because they are identical, time1 == time2 is true. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor objects time1 and time3 refer to different But. 
19:45:05.895 [main] INFO  TextEditor But time1 and time3 refer to different objects. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor false they are not identical, time1 == time3 is Because. 
19:45:05.895 [main] INFO  TextEditor Because they are not identical, time1 == time3 is false. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor as default, the equals method does the same thing By ==. 
19:45:05.895 [main] INFO  TextEditor By default, the equals method does the same thing as ==. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor want Time objects, that’s probably not what we For. 
19:45:05.895 [main] INFO  TextEditor For Time objects, that’s probably not what we want. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor equivalent example, time1 and time3 represent the same time of day, so we should consider them For. 
19:45:05.895 [main] INFO  TextEditor For example, time1 and time3 represent the same time of day, so we should consider them equivalent. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor equivalence can provide an equals method that implements this notion of We: 
19:45:05.895 [main] INFO  TextEditor We can provide an equals method that implements this notion of equivalence: 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor static is an instance method, so it uses this to refer to the current object and it doesn’t have the keyword equals. 
19:45:05.895 [main] INFO  TextEditor equals is an instance method, so it uses this to refer to the current object and it doesn’t have the keyword static. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor follows can invoke equals as We: 
19:45:05.895 [main] INFO  TextEditor We can invoke equals as follows: 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor as the equals method, this refers to the same object as time1, and that refers to the same object Inside time3. 
19:45:05.895 [main] INFO  TextEditor Inside the equals method, this refers to the same object as time1, and that refers to the same object as time3. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor true their instance variables are equal, the result is Since. 
19:45:05.895 [main] INFO  TextEditor Since their instance variables are equal, the result is true. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor equivalence objects use a similar notion of Many; 
19:45:05.895 [main] INFO  TextEditor Many objects use a similar notion of equivalence; 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor equal is, two objects are equivalent if their instance variables are that. 
19:45:05.895 [main] INFO  TextEditor that is, two objects are equivalent if their instance variables are equal. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor possible other definitions are But. 
19:45:05.895 [main] INFO  TextEditor But other definitions are possible. 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor 11.8  times Adding 
19:45:05.895 [main] INFO  TextEditor 11.8  Adding times 
19:45:05.895 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.895 [main] INFO  TextEditor minutes you are going to a movie that starts at 18:50 (or 6:50 PM), and the running time is 2 hours 16 Suppose. 
19:45:05.896 [main] INFO  TextEditor Suppose you are going to a movie that starts at 18:50 (or 6:50 PM), and the running time is 2 hours 16 minutes. 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor end time does the movie What? 
19:45:05.896 [main] INFO  TextEditor What time does the movie end? 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor out’ll use Time objects to figure it We. 
19:45:05.896 [main] INFO  TextEditor We’ll use Time objects to figure it out. 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor objects are two ways we could “add” Time Here: 
19:45:05.896 [main] INFO  TextEditor Here are two ways we could “add” Time objects: 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor parameters could write a static method that takes the two Time objects as We. 
19:45:05.896 [main] INFO  TextEditor We could write a static method that takes the two Time objects as parameters. 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor parameter could write an instance method that gets invoked on one object and takes the other as a We. 
19:45:05.896 [main] INFO  TextEditor We could write an instance method that gets invoked on one object and takes the other as a parameter. 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor both demonstrate the difference, we’ll do To. 
19:45:05.896 [main] INFO  TextEditor To demonstrate the difference, we’ll do both. 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor approach is a rough draft that uses the static Here: 
19:45:05.896 [main] INFO  TextEditor Here is a rough draft that uses the static approach: 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor method here’s how we would invoke the static And: 
19:45:05.896 [main] INFO  TextEditor And here’s how we would invoke the static method: 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor method the other hand, here’s what it looks like as an instance On: 
19:45:05.896 [main] INFO  TextEditor On the other hand, here’s what it looks like as an instance method: 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor are changes The: 
19:45:05.896 [main] INFO  TextEditor The changes are: 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor static removed the keyword We. 
19:45:05.896 [main] INFO  TextEditor We removed the keyword static. 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor parameter removed the first We. 
19:45:05.896 [main] INFO  TextEditor We removed the first parameter. 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor this replaced t1 with We. 
19:45:05.896 [main] INFO  TextEditor We replaced t1 with this. 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor that, you could replace t2 with Optionally. 
19:45:05.896 [main] INFO  TextEditor Optionally, you could replace t2 with that. 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor keyword this, that is not a Unlike; 
19:45:05.896 [main] INFO  TextEditor Unlike this, that is not a keyword; 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor name’s just a slightly clever variable it. 
19:45:05.896 [main] INFO  TextEditor it’s just a slightly clever variable name. 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor method here’s how we would invoke the instance And: 
19:45:05.896 [main] INFO  TextEditor And here’s how we would invoke the instance method: 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor it’s all there is to That. 
19:45:05.896 [main] INFO  TextEditor That’s all there is to it. 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor changes methods and instance methods do the same thing, and you can convert from one to the other with just a few Static. 
19:45:05.896 [main] INFO  TextEditor Static methods and instance methods do the same thing, and you can convert from one to the other with just a few changes. 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor correct’s only one problem: the addition code itself is not There. 
19:45:05.896 [main] INFO  TextEditor There’s only one problem: the addition code itself is not correct. 
19:45:05.896 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.896 [main] INFO  TextEditor time this example, it returns 20:66, which is not a valid For. 
19:45:05.896 [main] INFO  TextEditor For this example, it returns 20:66, which is not a valid time. 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor hour second exceeds 59, we have to “carry” into the minutes column, and if minute exceeds 59, we have to carry into If. 
19:45:05.897 [main] INFO  TextEditor If second exceeds 59, we have to “carry” into the minutes column, and if minute exceeds 59, we have to carry into hour. 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor add is a better version of Here: 
19:45:05.897 [main] INFO  TextEditor Here is a better version of add: 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor into’s still possible that hour may exceed 23, but there’s no days attribute to carry It. 
19:45:05.897 [main] INFO  TextEditor It’s still possible that hour may exceed 23, but there’s no days attribute to carry into. 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor result that case, sum.hour -= 24 would yield the correct In. 
19:45:05.897 [main] INFO  TextEditor In that case, sum.hour -= 24 would yield the correct result. 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor 11.9  modifiers methods and Pure 
19:45:05.897 [main] INFO  TextEditor 11.9  Pure methods and modifiers 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor parameters implementation of add does not modify either of the This. 
19:45:05.897 [main] INFO  TextEditor This implementation of add does not modify either of the parameters. 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor object, it creates and returns a new Time Instead. 
19:45:05.897 [main] INFO  TextEditor Instead, it creates and returns a new Time object. 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor this an alternative, we could have written a method like As: 
19:45:05.897 [main] INFO  TextEditor As an alternative, we could have written a method like this: 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor object increment method modifies an existing Time The. 
19:45:05.897 [main] INFO  TextEditor The increment method modifies an existing Time object. 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor anything doesn’t create a new one, and it doesn’t return It. 
19:45:05.897 [main] INFO  TextEditor It doesn’t create a new one, and it doesn’t return anything. 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor because contrast, methods like add are called pure In: 
19:45:05.897 [main] INFO  TextEditor In contrast, methods like add are called pure because: 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor parameters don’t modify the They. 
19:45:05.897 [main] INFO  TextEditor They don’t modify the parameters. 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor printing don’t have any other “side effects”, like They. 
19:45:05.897 [main] INFO  TextEditor They don’t have any other “side effects”, like printing. 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor state return value only depends on the parameters, not on any other The. 
19:45:05.897 [main] INFO  TextEditor The return value only depends on the parameters, not on any other state. 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor modifiers like increment, which breaks the first rule, are sometimes called Methods. 
19:45:05.897 [main] INFO  TextEditor Methods like increment, which breaks the first rule, are sometimes called modifiers. 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor modify are usually void methods, but sometimes they return a reference to the object they They. 
19:45:05.897 [main] INFO  TextEditor They are usually void methods, but sometimes they return a reference to the object they modify. 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor objects can be more efficient because they don’t create new Modifiers. 
19:45:05.897 [main] INFO  TextEditor Modifiers can be more efficient because they don’t create new objects. 
19:45:05.897 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.897 [main] INFO  TextEditor prone they can also be error-But. 
19:45:05.897 [main] INFO  TextEditor But they can also be error-prone. 
19:45:05.898 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.898 [main] INFO  TextEditor confusing objects are aliased, the effects of modifiers can be When. 
19:45:05.898 [main] INFO  TextEditor When objects are aliased, the effects of modifiers can be confusing. 
19:45:05.898 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.898 [main] INFO  TextEditor modifiers make a class immutable, like String, you can provide getters but no setters and pure methods but no To. 
19:45:05.898 [main] INFO  TextEditor To make a class immutable, like String, you can provide getters but no setters and pure methods but no modifiers. 
19:45:05.898 [main] INFO  TextEditor  Swap words (Before and after sentence)
19:45:05.898 [main] INFO  TextEditor debugging objects can be more difficult to work with, at first, but they can save you from long hours of Immutable. 
19:45:05.898 [main] INFO  TextEditor Immutable objects can be more difficult to work with, at first, but they can save you from long hours of debugging. 
19:45:05.898 [main] INFO  App        
Menu:
1. - Print text
2. - Find max number of sentences with same word (func. 1)
3. - Sort sentences (func. 2)
4. - Print words with length from interrogative sentences (func. 4)
5. - Swap first and last word in sentence (func. 5)
6. - Vowel words are sorted by first consonant letter (func. 8)
7. - Words are sorted by letter frequency (func. 9)
8. - Exit
Select: 
19:45:07.506 [main] INFO  TextEditor Vowel words are sorted by first consonant letter (func. 8)
19:45:07.513 [main] INFO  TextEditor objects
19:45:07.513 [main] INFO  TextEditor object
19:45:07.513 [main] INFO  TextEditor able
19:45:07.513 [main] INFO  TextEditor accessed
19:45:07.514 [main] INFO  TextEditor accesses
19:45:07.514 [main] INFO  TextEditor access
19:45:07.514 [main] INFO  TextEditor accessors
19:45:07.514 [main] INFO  TextEditor addition
19:45:07.514 [main] INFO  TextEditor address
19:45:07.514 [main] INFO  TextEditor add
19:45:07.514 [main] INFO  TextEditor identical
19:45:07.514 [main] INFO  TextEditor ideas
19:45:07.514 [main] INFO  TextEditor IDEs
19:45:07.514 [main] INFO  TextEditor identity
19:45:07.514 [main] INFO  TextEditor Adding
19:45:07.514 [main] INFO  TextEditor efficient
19:45:07.514 [main] INFO  TextEditor effects
19:45:07.514 [main] INFO  TextEditor affecting
19:45:07.514 [main] INFO  TextEditor yield
19:45:07.514 [main] INFO  TextEditor equals
19:45:07.514 [main] INFO  TextEditor always
19:45:07.514 [main] INFO  TextEditor already
19:45:07.514 [main] INFO  TextEditor equal
19:45:07.514 [main] INFO  TextEditor aliased
19:45:07.514 [main] INFO  TextEditor alternative
19:45:07.514 [main] INFO  TextEditor also
19:45:07.514 [main] INFO  TextEditor omitted
19:45:07.514 [main] INFO  TextEditor implement
19:45:07.514 [main] INFO  TextEditor immutable
19:45:07.514 [main] INFO  TextEditor implements
19:45:07.514 [main] INFO  TextEditor important
19:45:07.514 [main] INFO  TextEditor Immutable
19:45:07.514 [main] INFO  TextEditor implementation
19:45:07.514 [main] INFO  TextEditor independent
19:45:07.514 [main] INFO  TextEditor Instance
19:45:07.514 [main] INFO  TextEditor infinite
19:45:07.514 [main] INFO  TextEditor information
19:45:07.514 [main] INFO  TextEditor initialize
19:45:07.514 [main] INFO  TextEditor Instead
19:45:07.514 [main] INFO  TextEditor end
19:45:07.514 [main] INFO  TextEditor invoke
19:45:07.514 [main] INFO  TextEditor understand
19:45:07.514 [main] INFO  TextEditor indirectly
19:45:07.514 [main] INFO  TextEditor instance
19:45:07.514 [main] INFO  TextEditor unit
19:45:07.514 [main] INFO  TextEditor interesting
19:45:07.514 [main] INFO  TextEditor invokes
19:45:07.514 [main] INFO  TextEditor invoked
19:45:07.514 [main] INFO  TextEditor Unlike
19:45:07.514 [main] INFO  TextEditor invoking
19:45:07.514 [main] INFO  TextEditor encapsulation
19:45:07.514 [main] INFO  TextEditor integers
19:45:07.514 [main] INFO  TextEditor increment
19:45:07.514 [main] INFO  TextEditor initializes
19:45:07.514 [main] INFO  TextEditor instantiates
19:45:07.514 [main] INFO  TextEditor only
19:45:07.514 [main] INFO  TextEditor individual
19:45:07.514 [main] INFO  TextEditor instances
19:45:07.514 [main] INFO  TextEditor interact
19:45:07.514 [main] INFO  TextEditor encapsulated
19:45:07.514 [main] INFO  TextEditor encapsulate
19:45:07.514 [main] INFO  TextEditor appealing
19:45:07.514 [main] INFO  TextEditor approach
19:45:07.514 [main] INFO  TextEditor operate
19:45:07.514 [main] INFO  TextEditor Optionally
19:45:07.514 [main] INFO  TextEditor opposed
19:45:07.514 [main] INFO  TextEditor apart
19:45:07.514 [main] INFO  TextEditor operator
19:45:07.514 [main] INFO  TextEditor option
19:45:07.514 [main] INFO  TextEditor order
19:45:07.514 [main] INFO  TextEditor ourselves
19:45:07.514 [main] INFO  TextEditor argument
19:45:07.514 [main] INFO  TextEditor error
19:45:07.514 [main] INFO  TextEditor arguments
19:45:07.514 [main] INFO  TextEditor assigned
19:45:07.514 [main] INFO  TextEditor Using
19:45:07.514 [main] INFO  TextEditor users
19:45:07.514 [main] INFO  TextEditor useful
19:45:07.514 [main] INFO  TextEditor usually
19:45:07.514 [main] INFO  TextEditor isolation
19:45:07.514 [main] INFO  TextEditor use
19:45:07.514 [main] INFO  TextEditor using
19:45:07.514 [main] INFO  TextEditor isolated
19:45:07.514 [main] INFO  TextEditor used
19:45:07.514 [main] INFO  TextEditor assignment
19:45:07.514 [main] INFO  TextEditor uses
19:45:07.514 [main] INFO  TextEditor output
19:45:07.514 [main] INFO  TextEditor attributes
19:45:07.514 [main] INFO  TextEditor attribute
19:45:07.514 [main] INFO  TextEditor itself
19:45:07.514 [main] INFO  TextEditor out
19:45:07.514 [main] INFO  TextEditor Attributes
19:45:07.514 [main] INFO  TextEditor equivalent
19:45:07.514 [main] INFO  TextEditor Overloading
19:45:07.514 [main] INFO  TextEditor override
19:45:07.514 [main] INFO  TextEditor overloaded
19:45:07.514 [main] INFO  TextEditor equivalence
19:45:07.514 [main] INFO  TextEditor own
19:45:07.514 [main] INFO  TextEditor example
19:45:07.514 [main] INFO  TextEditor exceed
19:45:07.514 [main] INFO  TextEditor existing
19:45:07.514 [main] INFO  TextEditor exceeds
19:45:07.514 [main] INFO  App        
Menu:
1. - Print text
2. - Find max number of sentences with same word (func. 1)
3. - Sort sentences (func. 2)
4. - Print words with length from interrogative sentences (func. 4)
5. - Swap first and last word in sentence (func. 5)
6. - Vowel words are sorted by first consonant letter (func. 8)
7. - Words are sorted by letter frequency (func. 9)
8. - Exit
Select: 
19:45:11.251 [main] INFO  App        Input letter:
19:45:14.658 [main] INFO  TextEditor Words are sorted by letter frequency (func. 9)
19:45:14.662 [main] INFO  TextEditor Think
19:45:14.662 [main] INFO  TextEditor String
19:45:14.662 [main] INFO  TextEditor would
19:45:14.662 [main] INFO  TextEditor draft
19:45:14.662 [main] INFO  TextEditor addition
19:45:14.662 [main] INFO  TextEditor pass
19:45:14.662 [main] INFO  TextEditor going
19:45:14.662 [main] INFO  TextEditor contains
19:45:14.662 [main] INFO  TextEditor looking
19:45:14.662 [main] INFO  TextEditor much
19:45:14.662 [main] INFO  TextEditor hang
19:45:14.662 [main] INFO  TextEditor B
19:45:14.662 [main] INFO  TextEditor providing
19:45:14.662 [main] INFO  TextEditor Displaying
19:45:14.662 [main] INFO  TextEditor how
19:45:14.662 [main] INFO  TextEditor hand
19:45:14.662 [main] INFO  TextEditor column
19:45:14.662 [main] INFO  TextEditor printing
19:45:14.662 [main] INFO  TextEditor calls
19:45:14.662 [main] INFO  TextEditor days
19:45:14.662 [main] INFO  TextEditor information
19:45:14.662 [main] INFO  TextEditor toString
19:45:14.662 [main] INFO  TextEditor clarify
19:45:14.662 [main] INFO  TextEditor Using
19:45:14.662 [main] INFO  TextEditor do
19:45:14.662 [main] INFO  TextEditor hold
19:45:14.662 [main] INFO  TextEditor won
19:45:14.662 [main] INFO  TextEditor digit
19:45:14.662 [main] INFO  TextEditor add
19:45:14.662 [main] INFO  TextEditor static
19:45:14.662 [main] INFO  TextEditor commonly
19:45:14.662 [main] INFO  TextEditor list
19:45:14.662 [main] INFO  TextEditor carry
19:45:14.662 [main] INFO  TextEditor back
19:45:14.662 [main] INFO  TextEditor class
19:45:14.662 [main] INFO  TextEditor just
19:45:14.662 [main] INFO  TextEditor midnight
19:45:14.662 [main] INFO  TextEditor modify
19:45:14.662 [main] INFO  TextEditor print
19:45:14.662 [main] INFO  TextEditor syntax
19:45:14.662 [main] INFO  TextEditor slightly
19:45:14.662 [main] INFO  TextEditor Constructors
19:45:14.662 [main] INFO  TextEditor approach
19:45:14.662 [main] INFO  TextEditor output
19:45:14.662 [main] INFO  TextEditor usually
19:45:14.662 [main] INFO  TextEditor similar
19:45:14.662 [main] INFO  TextEditor isolation
19:45:14.662 [main] INFO  TextEditor Just
19:45:14.662 [main] INFO  TextEditor contrast
19:45:14.662 [main] INFO  TextEditor don
19:45:14.662 [main] INFO  TextEditor valid
19:45:14.662 [main] INFO  TextEditor known
19:45:14.662 [main] INFO  TextEditor too
19:45:14.662 [main] INFO  TextEditor wouldn
19:45:14.662 [main] INFO  TextEditor knows
19:45:14.662 [main] INFO  TextEditor may
19:45:14.662 [main] INFO  TextEditor could
19:45:14.662 [main] INFO  TextEditor ll
19:45:14.662 [main] INFO  TextEditor body
19:45:14.662 [main] INFO  TextEditor always
19:45:14.662 [main] INFO  TextEditor void
19:45:14.662 [main] INFO  TextEditor follows
19:45:14.662 [main] INFO  TextEditor difficult
19:45:14.663 [main] INFO  TextEditor fill
19:45:14.663 [main] INFO  TextEditor unit
19:45:14.663 [main] INFO  TextEditor naming
19:45:14.663 [main] INFO  TextEditor try
19:45:14.663 [main] INFO  TextEditor Optionally
19:45:14.663 [main] INFO  TextEditor running
19:45:14.663 [main] INFO  TextEditor println
19:45:14.663 [main] INFO  TextEditor total
19:45:14.663 [main] INFO  TextEditor hour
19:45:14.663 [main] INFO  TextEditor Point
19:45:14.663 [main] INFO  TextEditor formally
19:45:14.663 [main] INFO  TextEditor PM
19:45:14.663 [main] INFO  TextEditor coming
19:45:14.663 [main] INFO  TextEditor mutators
19:45:14.663 [main] INFO  TextEditor hiding
19:45:14.663 [main] INFO  TextEditor using
19:45:14.663 [main] INFO  TextEditor want
19:45:14.663 [main] INFO  TextEditor shouldn
19:45:14.663 [main] INFO  TextEditor must
19:45:14.663 [main] INFO  TextEditor starting
19:45:14.663 [main] INFO  TextEditor fact
19:45:14.663 [main] INFO  TextEditor probably
19:45:14.663 [main] INFO  TextEditor sum
19:45:14.663 [main] INFO  TextEditor two
19:45:14.663 [main] INFO  TextEditor long
19:45:14.663 [main] INFO  TextEditor matching
19:45:14.663 [main] INFO  TextEditor notion
19:45:14.663 [main] INFO  TextEditor apart
19:45:14.663 [main] INFO  TextEditor Java
19:45:14.663 [main] INFO  TextEditor diagram
19:45:14.663 [main] INFO  TextEditor call
19:45:14.663 [main] INFO  TextEditor boring
19:45:14.663 [main] INFO  TextEditor Writing
19:45:14.663 [main] INFO  TextEditor thing
19:45:14.663 [main] INFO  TextEditor had
19:45:14.663 [main] INFO  TextEditor things
19:45:14.663 [main] INFO  TextEditor has
19:45:14.663 [main] INFO  TextEditor starts
19:45:14.663 [main] INFO  TextEditor displaying
19:45:14.663 [main] INFO  TextEditor might
19:45:14.663 [main] INFO  TextEditor constructor
19:45:14.663 [main] INFO  TextEditor constructors
19:45:14.663 [main] INFO  TextEditor Now
19:45:14.663 [main] INFO  TextEditor Class
19:45:14.663 [main] INFO  TextEditor Static
19:45:14.663 [main] INFO  TextEditor rough
19:45:14.663 [main] INFO  TextEditor string
19:45:14.663 [main] INFO  TextEditor invoking
19:45:14.663 [main] INFO  TextEditor non
19:45:14.663 [main] INFO  TextEditor printf
19:45:14.663 [main] INFO  TextEditor not
19:45:14.663 [main] INFO  TextEditor common
19:45:14.663 [main] INFO  TextEditor hours
19:45:14.663 [main] INFO  TextEditor Pulling
19:45:14.663 [main] INFO  TextEditor way
19:45:14.663 [main] INFO  TextEditor passing
19:45:14.663 [main] INFO  TextEditor shadow
19:45:14.663 [main] INFO  TextEditor quickly
19:45:14.663 [main] INFO  TextEditor displays
19:45:14.663 [main] INFO  TextEditor put
19:45:14.663 [main] INFO  TextEditor far
19:45:14.663 [main] INFO  TextEditor still
19:45:14.663 [main] INFO  TextEditor work
19:45:14.663 [main] INFO  TextEditor following
19:45:14.663 [main] INFO  TextEditor out
19:45:14.663 [main] INFO  TextEditor noon
19:45:14.663 [main] INFO  TextEditor ways
19:45:14.663 [main] INFO  TextEditor writing
19:45:14.663 [main] INFO  TextEditor Adding
19:45:14.663 [main] INFO  TextEditor copy
19:45:14.663 [main] INFO  TextEditor confusing
19:45:14.663 [main] INFO  TextEditor display
19:45:14.663 [main] INFO  TextEditor fraction
19:45:14.663 [main] INFO  TextEditor width
19:45:14.663 [main] INFO  TextEditor first
19:45:14.663 [main] INFO  TextEditor data
19:45:14.663 [main] INFO  TextEditor own
19:45:14.663 [main] INFO  TextEditor looks
19:45:14.663 [main] INFO  TextEditor shows
19:45:14.663 [main] INFO  TextEditor should
19:45:14.663 [main] INFO  TextEditor only
19:45:14.663 [main] INFO  TextEditor day
19:45:14.663 [main] INFO  TextEditor individual
19:45:14.663 [main] INFO  TextEditor kind
19:45:14.663 [main] INFO  TextEditor format
19:45:14.663 [main] INFO  TextEditor most
19:45:14.663 [main] INFO  TextEditor important
19:45:14.663 [main] INFO  TextEditor option
19:45:14.663 [main] INFO  TextEditor point
19:45:14.663 [main] INFO  TextEditor can
19:45:14.663 [main] INFO  TextEditor public
19:45:14.663 [main] INFO  TextEditor floating
19:45:14.663 [main] INFO  TextEditor track
19:45:14.663 [main] INFO  TextEditor didn
19:45:14.663 [main] INFO  TextEditor will
19:45:14.663 [main] INFO  TextEditor also
19:45:14.663 [main] INFO  TextEditor build
19:45:14.663 [main] INFO  TextEditor simply
19:45:14.663 [main] INFO  TextEditor leading
19:45:14.663 [main] INFO  TextEditor objects
19:45:14.663 [main] INFO  TextEditor Overloading
19:45:14.663 [main] INFO  TextEditor definitions
19:45:14.663 [main] INFO  TextEditor Consider
19:45:14.663 [main] INFO  TextEditor zeros
19:45:14.663 [main] INFO  TextEditor version
19:45:14.663 [main] INFO  TextEditor omitted
19:45:14.663 [main] INFO  TextEditor returns
19:45:14.663 [main] INFO  TextEditor assigned
19:45:14.663 [main] INFO  TextEditor object
19:45:14.663 [main] INFO  TextEditor chapter
19:45:14.663 [main] INFO  TextEditor Instance
19:45:14.663 [main] INFO  TextEditor infinite
19:45:14.663 [main] INFO  TextEditor result
19:45:14.663 [main] INFO  TextEditor same
19:45:14.663 [main] INFO  TextEditor term
19:45:14.663 [main] INFO  TextEditor behavior
19:45:14.664 [main] INFO  TextEditor address
19:45:14.664 [main] INFO  TextEditor sets
19:45:14.664 [main] INFO  TextEditor possible
19:45:14.664 [main] INFO  TextEditor returning
19:45:14.664 [main] INFO  TextEditor initialize
19:45:14.664 [main] INFO  TextEditor correct
19:45:14.664 [main] INFO  TextEditor meaningful
19:45:14.664 [main] INFO  TextEditor later
19:45:14.664 [main] INFO  TextEditor Hello
19:45:14.664 [main] INFO  TextEditor legal
19:45:14.664 [main] INFO  TextEditor doesn
19:45:14.664 [main] INFO  TextEditor check
19:45:14.664 [main] INFO  TextEditor users
19:45:14.664 [main] INFO  TextEditor take
19:45:14.664 [main] INFO  TextEditor State
19:45:14.664 [main] INFO  TextEditor decimal
19:45:14.664 [main] INFO  TextEditor useful
19:45:14.664 [main] INFO  TextEditor private
19:45:14.664 [main] INFO  TextEditor beginning
19:45:14.664 [main] INFO  TextEditor Instead
19:45:14.664 [main] INFO  TextEditor rather
19:45:14.664 [main] INFO  TextEditor provides
19:45:14.664 [main] INFO  TextEditor client
19:45:14.664 [main] INFO  TextEditor end
19:45:14.664 [main] INFO  TextEditor compiler
19:45:14.664 [main] INFO  TextEditor mistake
19:45:14.664 [main] INFO  TextEditor multiple
19:45:14.664 [main] INFO  TextEditor false
19:45:14.664 [main] INFO  TextEditor special
19:45:14.664 [main] INFO  TextEditor existing
19:45:14.664 [main] INFO  TextEditor appealing
19:45:14.664 [main] INFO  TextEditor named
19:45:14.664 [main] INFO  TextEditor called
19:45:14.664 [main] INFO  TextEditor movie
19:45:14.664 [main] INFO  TextEditor invoke
19:45:14.664 [main] INFO  TextEditor convert
19:45:14.664 [main] INFO  TextEditor signatures
19:45:14.664 [main] INFO  TextEditor number
19:45:14.664 [main] INFO  TextEditor Private
19:45:14.664 [main] INFO  TextEditor write
19:45:14.664 [main] INFO  TextEditor order
19:45:14.664 [main] INFO  TextEditor likely
19:45:14.664 [main] INFO  TextEditor understand
19:45:14.664 [main] INFO  TextEditor yield
19:45:14.664 [main] INFO  TextEditor have
19:45:14.664 [main] INFO  TextEditor side
19:45:14.664 [main] INFO  TextEditor change
19:45:14.664 [main] INFO  TextEditor indirectly
19:45:14.664 [main] INFO  TextEditor hide
19:45:14.664 [main] INFO  TextEditor names
19:45:14.664 [main] INFO  TextEditor Defining
19:45:14.664 [main] INFO  TextEditor able
19:45:14.664 [main] INFO  TextEditor equals
19:45:14.664 [main] INFO  TextEditor attributes
19:45:14.664 [main] INFO  TextEditor return
19:45:14.664 [main] INFO  TextEditor instance
19:45:14.664 [main] INFO  TextEditor use
19:45:14.664 [main] INFO  TextEditor modifies
19:45:14.664 [main] INFO  TextEditor simplifies
19:45:14.664 [main] INFO  TextEditor second
19:45:14.664 [main] INFO  TextEditor identical
19:45:14.664 [main] INFO  TextEditor copies
19:45:14.664 [main] INFO  TextEditor directly
19:45:14.664 [main] INFO  TextEditor new
19:45:14.664 [main] INFO  TextEditor read
19:45:14.664 [main] INFO  TextEditor already
19:45:14.664 [main] INFO  TextEditor ideas
19:45:14.664 [main] INFO  TextEditor belongs
19:45:14.664 [main] INFO  TextEditor true
19:45:14.664 [main] INFO  TextEditor collect
19:45:14.664 [main] INFO  TextEditor code
19:45:14.664 [main] INFO  TextEditor times
19:45:14.664 [main] INFO  TextEditor design
19:45:14.664 [main] INFO  TextEditor make
19:45:14.664 [main] INFO  TextEditor opposed
19:45:14.664 [main] INFO  TextEditor minute
19:45:14.664 [main] INFO  TextEditor reason
19:45:14.664 [main] INFO  TextEditor let
19:45:14.664 [main] INFO  TextEditor programmers
19:45:14.664 [main] INFO  TextEditor state
19:45:14.664 [main] INFO  TextEditor recursion
19:45:14.664 [main] INFO  TextEditor Classes
19:45:14.664 [main] INFO  TextEditor based
19:45:14.664 [main] INFO  TextEditor them
19:45:14.664 [main] INFO  TextEditor then
19:45:14.664 [main] INFO  TextEditor invokes
19:45:14.664 [main] INFO  TextEditor concisely
19:45:14.664 [main] INFO  TextEditor creating
19:45:14.664 [main] INFO  TextEditor invoked
19:45:14.664 [main] INFO  TextEditor access
19:45:14.664 [main] INFO  TextEditor default
19:45:14.664 [main] INFO  TextEditor current
19:45:14.664 [main] INFO  TextEditor does
19:45:14.664 [main] INFO  TextEditor attribute
19:45:14.664 [main] INFO  TextEditor takes
19:45:14.664 [main] INFO  TextEditor variables
19:45:14.664 [main] INFO  TextEditor Section
19:45:14.664 [main] INFO  TextEditor Figure
19:45:14.664 [main] INFO  TextEditor single
19:45:14.664 [main] INFO  TextEditor Modifiers
19:45:14.664 [main] INFO  TextEditor principle
19:45:14.664 [main] INFO  TextEditor numbers
19:45:14.665 [main] INFO  TextEditor operator
19:45:14.665 [main] INFO  TextEditor zero
19:45:14.665 [main] INFO  TextEditor compile
19:45:14.665 [main] INFO  TextEditor houses
19:45:14.665 [main] INFO  TextEditor Recall
19:45:14.665 [main] INFO  TextEditor written
19:45:14.665 [main] INFO  TextEditor keyword
19:45:14.665 [main] INFO  TextEditor Unlike
19:45:14.665 [main] INFO  TextEditor given
19:45:14.665 [main] INFO  TextEditor immutable
19:45:14.665 [main] INFO  TextEditor checks
19:45:14.665 [main] INFO  TextEditor solve
19:45:14.665 [main] INFO  TextEditor name
19:45:14.665 [main] INFO  TextEditor next
19:45:14.665 [main] INFO  TextEditor classes
19:45:14.665 [main] INFO  TextEditor changes
19:45:14.665 [main] INFO  TextEditor rule
19:45:14.665 [main] INFO  TextEditor Time
19:45:14.665 [main] INFO  TextEditor modifiers
19:45:14.665 [main] INFO  TextEditor pure
19:45:14.665 [main] INFO  TextEditor house
19:45:14.665 [main] INFO  TextEditor declaring
19:45:14.665 [main] INFO  TextEditor debugging
19:45:14.665 [main] INFO  TextEditor definition
19:45:14.665 [main] INFO  TextEditor convention
19:45:14.665 [main] INFO  TextEditor types
19:45:14.665 [main] INFO  TextEditor figure
19:45:14.665 [main] INFO  TextEditor accessors
19:45:14.665 [main] INFO  TextEditor previous
19:45:14.665 [main] INFO  TextEditor breaks
19:45:14.665 [main] INFO  TextEditor equal
19:45:14.665 [main] INFO  TextEditor step
19:45:14.665 [main] INFO  TextEditor time
19:45:14.665 [main] INFO  TextEditor encapsulation
19:45:14.665 [main] INFO  TextEditor IDEs
19:45:14.665 [main] INFO  TextEditor type
19:45:14.665 [main] INFO  TextEditor seconds
19:45:14.665 [main] INFO  TextEditor problem
19:45:14.665 [main] INFO  TextEditor Suppose
19:45:14.665 [main] INFO  TextEditor case
19:45:14.665 [main] INFO  TextEditor method
19:45:14.665 [main] INFO  TextEditor double
19:45:14.665 [main] INFO  TextEditor itself
19:45:14.665 [main] INFO  TextEditor provide
19:45:14.665 [main] INFO  TextEditor style
19:45:14.665 [main] INFO  TextEditor Pure
19:45:14.665 [main] INFO  TextEditor methods
19:45:14.665 [main] INFO  TextEditor formatted
19:45:14.665 [main] INFO  TextEditor isolated
19:45:14.665 [main] INFO  TextEditor More
19:45:14.665 [main] INFO  TextEditor flexibility
19:45:14.665 [main] INFO  TextEditor identity
19:45:14.665 [main] INFO  TextEditor get
19:45:14.665 [main] INFO  TextEditor causes
19:45:14.665 [main] INFO  TextEditor means
19:45:14.665 [main] INFO  TextEditor more
19:45:14.665 [main] INFO  TextEditor Chapter
19:45:14.665 [main] INFO  TextEditor initializes
19:45:14.665 [main] INFO  TextEditor help
19:45:14.665 [main] INFO  TextEditor prone
19:45:14.665 [main] INFO  TextEditor choice
19:45:14.665 [main] INFO  TextEditor instantiates
19:45:14.665 [main] INFO  TextEditor argument
19:45:14.665 [main] INFO  TextEditor tell
19:45:14.665 [main] INFO  TextEditor Attributes
19:45:14.665 [main] INFO  TextEditor simple
19:45:14.665 [main] INFO  TextEditor section
19:45:14.665 [main] INFO  TextEditor used
19:45:14.665 [main] INFO  TextEditor aliased
19:45:14.665 [main] INFO  TextEditor consider
19:45:14.665 [main] INFO  TextEditor minutes
19:45:14.665 [main] INFO  TextEditor done
19:45:14.665 [main] INFO  TextEditor blueprint
19:45:14.665 [main] INFO  TextEditor Methods
19:45:14.665 [main] INFO  TextEditor Immutable
19:45:14.665 [main] INFO  TextEditor instances
19:45:14.665 [main] INFO  TextEditor line
19:45:14.665 [main] INFO  TextEditor values
19:45:14.665 [main] INFO  TextEditor interact
19:45:14.665 [main] INFO  TextEditor affecting
19:45:14.665 [main] INFO  TextEditor error
19:45:14.665 [main] INFO  TextEditor value
19:45:14.665 [main] INFO  TextEditor assignment
19:45:14.665 [main] INFO  TextEditor clear
19:45:14.665 [main] INFO  TextEditor gets
19:45:14.665 [main] INFO  TextEditor fragment
19:45:14.665 [main] INFO  TextEditor variable
19:45:14.665 [main] INFO  TextEditor arguments
19:45:14.665 [main] INFO  TextEditor uses
19:45:14.665 [main] INFO  TextEditor printTime
19:45:14.665 [main] INFO  TextEditor equivalent
19:45:14.665 [main] INFO  TextEditor getSomething
19:45:14.665 [main] INFO  TextEditor Parameters
19:45:14.665 [main] INFO  TextEditor require
19:45:14.665 [main] INFO  TextEditor setSomething
19:45:14.665 [main] INFO  TextEditor Here
19:45:14.665 [main] INFO  TextEditor example
19:45:14.665 [main] INFO  TextEditor see
19:45:14.665 [main] INFO  TextEditor refuse
19:45:14.665 [main] INFO  TextEditor override
19:45:14.665 [main] INFO  TextEditor sometimes
19:45:14.665 [main] INFO  TextEditor implement
19:45:14.665 [main] INFO  TextEditor need
19:45:14.665 [main] INFO  TextEditor related
19:45:14.665 [main] INFO  TextEditor message
19:45:14.665 [main] INFO  TextEditor better
19:45:14.665 [main] INFO  TextEditor there
19:45:14.665 [main] INFO  TextEditor accessed
19:45:14.665 [main] INFO  TextEditor accesses
19:45:14.665 [main] INFO  TextEditor operate
19:45:14.665 [main] INFO  TextEditor template
19:45:14.665 [main] INFO  TextEditor together
19:45:14.665 [main] INFO  TextEditor reminder
19:45:14.665 [main] INFO  TextEditor removed
19:45:14.665 [main] INFO  TextEditor complete
19:45:14.666 [main] INFO  TextEditor setters
19:45:14.666 [main] INFO  TextEditor overloaded
19:45:14.666 [main] INFO  TextEditor different
19:45:14.666 [main] INFO  TextEditor becomes
19:45:14.666 [main] INFO  TextEditor Beginners
19:45:14.666 [main] INFO  TextEditor define
19:45:14.666 [main] INFO  TextEditor hexadecimal
19:45:14.666 [main] INFO  TextEditor declared
19:45:14.666 [main] INFO  TextEditor interesting
19:45:14.666 [main] INFO  TextEditor clever
19:45:14.666 [main] INFO  TextEditor defined
19:45:14.666 [main] INFO  TextEditor seen
19:45:14.666 [main] INFO  TextEditor necessary
19:45:14.666 [main] INFO  TextEditor Getters
19:45:14.666 [main] INFO  TextEditor replaced
19:45:14.666 [main] INFO  TextEditor declare
19:45:14.666 [main] INFO  TextEditor There
19:45:14.666 [main] INFO  TextEditor treated
19:45:14.666 [main] INFO  TextEditor demonstrate
19:45:14.666 [main] INFO  TextEditor parameters
19:45:14.666 [main] INFO  TextEditor implements
19:45:14.666 [main] INFO  TextEditor statement
19:45:14.666 [main] INFO  TextEditor refer
19:45:14.666 [main] INFO  TextEditor Rectangle
19:45:14.666 [main] INFO  TextEditor decide
19:45:14.666 [main] INFO  TextEditor three
19:45:14.666 [main] INFO  TextEditor integers
19:45:14.666 [main] INFO  TextEditor depends
19:45:14.666 [main] INFO  TextEditor TimeClient
19:45:14.666 [main] INFO  TextEditor specifies
19:45:14.666 [main] INFO  TextEditor increment
19:45:14.666 [main] INFO  TextEditor ourselves
19:45:14.666 [main] INFO  TextEditor getters
19:45:14.666 [main] INFO  TextEditor efficient
19:45:14.666 [main] INFO  TextEditor replace
19:45:14.666 [main] INFO  TextEditor create
19:45:14.666 [main] INFO  TextEditor created
19:45:14.666 [main] INFO  TextEditor effects
19:45:14.666 [main] INFO  TextEditor refers
19:45:14.666 [main] INFO  TextEditor keep
19:45:14.666 [main] INFO  TextEditor creates
19:45:14.666 [main] INFO  TextEditor seems
19:45:14.666 [main] INFO  TextEditor here
19:45:14.666 [main] INFO  TextEditor encapsulated
19:45:14.666 [main] INFO  TextEditor parameter
19:45:14.666 [main] INFO  TextEditor implementation
19:45:14.666 [main] INFO  TextEditor alternative
19:45:14.666 [main] INFO  TextEditor encapsulate
19:45:14.666 [main] INFO  TextEditor independent
19:45:14.666 [main] INFO  TextEditor represent
19:45:14.666 [main] INFO  TextEditor generates
19:45:14.666 [main] INFO  TextEditor exceed
19:45:14.666 [main] INFO  TextEditor representation
19:45:14.666 [main] INFO  TextEditor referred
19:45:14.666 [main] INFO  TextEditor represents
19:45:14.666 [main] INFO  TextEditor exceeds
19:45:14.666 [main] INFO  TextEditor equivalence
19:45:14.666 [main] INFO  TextEditor difference
19:45:14.666 [main] INFO  TextEditor generate
19:45:14.666 [main] INFO  TextEditor dependent
19:45:14.666 [main] INFO  TextEditor references
19:45:14.666 [main] INFO  TextEditor reference
19:45:14.666 [main] INFO  App        
Menu:
1. - Print text
2. - Find max number of sentences with same word (func. 1)
3. - Sort sentences (func. 2)
4. - Print words with length from interrogative sentences (func. 4)
5. - Swap first and last word in sentence (func. 5)
6. - Vowel words are sorted by first consonant letter (func. 8)
7. - Words are sorted by letter frequency (func. 9)
8. - Exit
Select: 
